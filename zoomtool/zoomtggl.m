function zoomtggl(ga, howCalled)% ZOOMTGGL Used by ZOOMTOOL to move toggle attachment of%           cursors to line objects.%       ZOOMTGGLT(H,howCalled) where H is the axis ZOOMTOOL is active in%           and howCalled is either 1) 'line click'%                                   2) 'toggle button'%                                   3) 'key press'%%       See also ZOOMCLR ZOOMDOWN ZOOMLEFT ZOOMMENU ZOOMMOVE%           ZOOMPKLF ZOOMPKRT ZOOMRGHT ZOOMSET ZOOMTGGL ZOOMTOOL%           ZOOMUP ZOOMXFUL ZOOMXIN ZOOMXOUT ZOOMYFUL ZOOMYIN%           ZOOMYOUT%       Dennis W. Brown 1-10-94%       Copyright (c) 1994 by Dennis W. Brown%       May be freely distributed.%       Not for use in commercial products.%   -Modified by Jonathan Jacobs, February 1997, to allow toggling%   directly to a clicked line, rather than by cycling through all%   existing lines.  This requires a parameter 'howCalled'%   to insure proper behavior of 1) line-click toggling%                                2) toggle button toggling%                                3) key-press ('T') toggling%%      Clicking on a line makes it the current line.  Its ButtonDownFcn is%      now "zoomdown".  The previous current line's ButtonDownFcn is reset to%      "ZOOMTGGL" (with an parameter of 'line click').%%   -Fixed so that it is now possible to plot lines with different x-limits%   yet still jump between them with out causing an error.  (jj - 9/97)% Modifications by Jonathan Jacobs%                  September 1997 - December 2000 (last mod: 12/17/00)%disp( 'zoomtggl')%disp( ['how called: ' howCalled] )kprss = strcmp(howCalled, 'key press');% get handles to all the linestemp = ga.UserData;if length(temp)<3   gf = ga.Parent;   lhand = get(findpush(gf,'T'),'UserData');else   lhand = temp{3};endhcur = findline(ga,'zoomed');  % get present line% Obtain coordinates of mouse click location in axes unitspt = get(ga,'Currentpoint');t = pt(1,1);              % added by Jonathan Jacobs so that aif t<1 || kprss           % toggle before clicking in axis doesn't   t = crsrloc(ga,1001);  % make the cursor jump to beginningend% added by Jonathan Jacobs to fix toggling behaviorgcoStr = get(gco,'Tag'); % the clicked lineif strcmp(howCalled, 'line click')   for i = 1:length(lhand)      hiStr = lhand(i).Tag;      if all(strcmp(hiStr, gcoStr))         %curLineStr = mat2str(h{i});         break      end   endelse   for i=1:length(lhand)      if lhand(i)==hcur         break      end   end   % only toggle between VISIBLE lines   isVis=0;   while ~isVis      i=i+1;              % next line index      if i>length(lhand)  % wrap if necessary         i=1;      end      isVis = strcmpi(lhand(i).Visible,'on');   endend% re-identify the lineshcur.UserData = [];             % no longer the current linelhand(i).UserData='zoomed';  % this is now the current lineif isempty(lhand(i).DisplayName)   newStr=lhand(i).Tag;else   newStr=lhand(i).DisplayName;endif length(newStr)<2   newStr=[newStr ' '];endnewStr=[newStr ' ']; %at least 3 char long, ending w/space(s)% change the string for the line toggle checkbox to indicate current line% find the checkbox with the OLD line's color% added by Jonathan Jacobs, February 1997% modfied 02/10/99oldTag = hcur.Tag;oldBoxH = findobj(gcf, 'Style', 'checkbox', 'Tag', oldTag);if ~isempty(oldBoxH)   oldStr  = oldBoxH.String;   oldPos  = oldBoxH.Position;   oldPos(3) = 65;   oldBoxH.Position = oldPos;   oldStr(end) = ' ';   oldBoxH.String = oldStr;   oldBoxH.FontWeight = 'Normal';   oldBoxH.FontSize = 12;   oldBoxH.FontAngle = 'Normal';      newTag  = lhand(i).Tag;   newBoxH = findobj(gcf, 'Style', 'Checkbox', 'Tag', newTag);   %newStr  = newBoxH.String;   newPos  = newBoxH.Position;   newPos(3) = 65;   newBoxH.Position=newPos;   newStr(end) = char(3663);   newBoxH.String = newStr;   newBoxH.FontWeight ='Bold';   newBoxH.FontSize = 16;   newBoxH.FontAngle = 'ital';end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% setup for mouse movement or releaseset(hcur,'ButtonDownFcn',...   'zoomtggl(get(gcf,''CurrentAxes''), ''line click'');');lhand(i).ButtonDownFcn='zoomdown';% set horizontal factorx = lhand(i).XData;y = lhand(i).YData;xmin = min(x(~isnan(x)));xmax = max(x(~isnan(x)));xlen = length(x);xfactor = (xmax-xmin)/(xlen-1);      % x spacingset(get(ga,'XLabel'),'UserData',xfactor);% set axes on line pointsp = get(ga,'XLim');v1 = p(1);v2 = p(2);% calculate current indicesk1 = round((v1-xmin)/xfactor) + 1;if k1<=0,k1=1;endif k1>=xlen,k1=xlen;endk2 = round((v2-xmin)/xfactor) + 1;if k2<=0,k2=1;endif k2>=xlen,k2=xlen;end% current point locationsc1v = (k1-1)*xfactor + xmin;c2v = (k2-1)*xfactor + xmin;% reset xlimits%set(ga,'xlim',[c1v c2v]);% update cursor positons% check to see if click is now past axis new axis limits%   adjust if it isif t <= c1v+100*eps, t=c1v; endif t >= c2v-100*eps, t=c2v; end% get vertical cursor positionsv1 = crsrloc(ga,1001);v2 = crsrloc(ga,2001);% go ahead and move closest cursor to mouse clickif abs(t-v1) < abs(t-v2)   v1=t;else   v2=t;end% calculate current indices% (limits on k1,k2 are kept from going out of bounds% this lets us plot lines with dissimilar x limits% added by jj, 9/97)k1 = round((v1-xmin)/xfactor) + 1;if k1<=0,k1=1;endif k1>=xlen,k1=xlen;endk2 = round((v2-xmin)/xfactor) + 1;if k2<=0,k2=1;endif k2>=xlen,k2=xlen;end% current point locationsc1v = (k1-1)*xfactor + xmin;c1h = y(k1);c2v = (k2-1)*xfactor + xmin;c2h = y(k2);% handles to readoutstemp = ga.UserData;h = temp(1);crsrmove(ga,1001,c1v);crsrmove(ga,1002,c1h);crsrmove(ga,2001,c2v);crsrmove(ga,2002,c2h);h{9}.String  = num2str(c1v);h{10}.String = num2str(c1h);h{11}.String = num2str(abs(c2v-c1v));h{12}.String = num2str(abs(c2h-c1h));h{13}.String = num2str(c2v);h{14}.String = num2str(c2h);