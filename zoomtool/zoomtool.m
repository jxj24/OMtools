function zoomtool(ga)% ZOOMTOOL Axes zoom/measurement tool.%       ZOOMTOOL(H) activates the ZOOMTOOL on the axes%       specified by the handle H.%%       ZOOMTOOL activates the ZOOMTOOL on the current axes.%%       Once activated, ZOOMTOOL redraws the axis with two%       vertical/horizontal cursors and several controls.%%       The cursor push button controls (one set for each cursor)%       allow movement of the vertical cursor along the hori-%       zontal axis. The horizontal cursor is automatically%       adjusted to the magnitude of the corresponding sample%       at the vertical cursor location. The push button%       controls are:%%           "<" and ">" move the vertical cursor to the next%               left or right sample.%%           "<<" and ">>" move the vertical cursor to the next%               left or right peak.%%       A peak is defined a the next maxima or minima in the%       curve formed by the vector values.%%       In addition to cursor manipulation with push buttons,%       the cursors can also be manipulated with the mouse. A%       single click on a curve will move the nearest cursor%       (horizontal distance) to that point. The mouse button%       can also be held down and the nearest cursor "dragged"%       to the desired location.%%       The zoom push button controls (one set for the X-axis,%       Y-axis, and both X- and Y-axis) are:%%           "in" zooms in on the X-axis between the cursors.%               Zooms to maximize the view of the Y-axis.%%           "out" zooms out to the previous zoom limits.%%           "full" zooms out to the full axis limits.%%       The X-Axis readouts are edit boxes. Using these edit%       boxes, a desired location for the vertical cursors can%       be entered. After pressing return, the cursor will be%       moved to the new location. The "Delta X" readout is%       also an edit box. It can be used to enter an offset%       from cursor 1 to place cursor 2. Entering a location%       such that a cursor would be located beyond the limits%       of the axes will move the cursor to the axes limit.%%       The toggle push button ("T") toggles the attachment of%       the cursor to next curve when an axes contains more than%       one curve. Toggling to a specific curve can be accom-%       plished with the mouse by simply selecting the desired%       line.%%       If the handle, h, is omitted, the current axis is used.%%       Quitting ZOOMTOOL with the quit push button ("Q") leaves%       the axes in the last zoomed state, removing the button%       bars and readouts. after which the user can print or%       otherwise treat the axes as any other axes.%%       Note: Only one ZOOMTOOL can be active in a single%       figure window at a time. Multiple ZOOMTOOLs can be active%       as long as they are attached to axes in different figure%       windows. While active, ZOOMTOOL will cover the X-axis%       label and may also cover the axes title.%%       See also ZOOMCLR ZOOMDOWN ZOOMLEFT ZOOMMENU ZOOMMOVE%           ZOOMPKLF ZOOMPKRT ZOOMRGHT ZOOMSET ZOOMTGGL ZOOMTOOL%           ZOOMUP ZOOMXFUL ZOOMXIN ZOOMXOUT ZOOMYFUL ZOOMYIN%           ZOOMYOUT%%   There is another page or so of comments not displayed here.%   Type 'edit ZOOMTOOL' to read them.  There are many useful%   commands listed.%%       Dennis W. Brown 1-10-94%       Copyright (c) 1994 by Dennis W. Brown%       May be freely distributed.%       Not for use in commercial products.% %  Many new features have been added to this excellent tool by Jonathan Jacobs%  and Peg Skelly over the course of the past several years (1995-2005).  If there%  are any problems with these functions, it is most probably our fault, not%  that of the original author.  You may contact us at:  jxj24@cwru.edu%%  New features:%   -Scroll the data window (full or half page to the left or right) %    with either button presses or key strokes%     '8' = 'Next page'           '2' = 'Previous page'%     '9' = 'Next half page'      '7' = 'Previous half page'%     '5' = 'refresh the screen'%%   -Move cursors by key strokes%     '4' = Cursor 1 to the left%     '6' = Cursor 1 to the right%     '1' = Cursor 2 to the left%     '3' = Cursor 2 to the right%%   -Zoom x-axis in/out%     'i' = zoom x-axis in, using cursor x-positions as new limits%     'o' = zoom x-axis out to previous limits%%  -Change the X and Y axis upper and lower limits simply by typing%   desired values into the appropriate boxes (you must either hit the%   'Enter'/'Return' key, or click outside of the box for the new value to %   take effect.  The cursors will be forced to appear in the new X range.%%  -Toggle the visibility of the cursors.%     'c' followed by a number will toggle the visibility of that cursor%         e.g. 'c1' (without the quotes) will toggle cursor 1 on or off %%  -Toggle the visibility of the data lines.%     'v' followed by a number will toggle the visibility of that cursor%         e.g. 'c1' (without the quotes) will toggle line 1 on or off %%   -Select active line%     't' = cycle through the visible lines making the next line active%%  -Add data points to 'xyCur1Mat', 'xyCur2Mat' (available as global variables%   in the base workspace) by clicking on 'C1 (x,y)' or 'C2 (x,y)' buttons.%   These matrices can be cleared by clicking on the 'clear' button(s).%%  -Click on a line to toggle directly to that line, rather than %   cycling through other lines to get there.%%  -Added a 'Y Autorange' checkbox.  This usually causes the y axis limits to%   automatically adjust to best fit the range of data traces on the screen.%%  -Modified to allow plotting of data with NaNs.%%  -Modified to allow dragging of the cursor into sections of data%   that are NaN.%%  -Works with MATLAB 5.  Extensively tested since 1997%   (will get warnings unless you remove the 's' from the 'X/Y/ZTickLabels' properties.%   01/14/98 separate ticklabel strings for ML4 and ML5 %%  -Added control button to change cursor colors. (01/13/98)%%  -Cursors no longer 'get in the way' of clicking on data lines that they cover%   (or nearly cover). This was fixed by modifying 'crsrmake.m' so that all cursors%   have their 'HitTest' property turned off.  (12/05/00)%%  -Zoomtools can now be open and active in multiple windows at once.  (06/09/02)%%  -Cur1 and Cur2 each have (x,y) matrices filled with Cn (x,y) clicks. (10/14/03)%%  -Cur1 and Cur2 now also record time index of click and includes t0 for graphs%   that do not start at t0 = 0.  (04/19/07)%%  -Works with MATLAB 7.  Tested up to 7.5 (2007b)%% Things that may be added someday:%%   More involved xyMat controls: per cursor the ability to view contents/size of xyMat%%   Due to the way ZOOMTOOL was written to deal with time vectors (i.e. 'xfactor')%   it is essentially impossible to get accurate results with data that has been%   sampled at irregular intervals, such as simulink results generated with%   variable time steps.  There is probably not much that I can do about this.%%  last mod: 02/09/10%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% global variables added by p skelly to get datapointsglobal  xyCur1Mat xyCur2Mat xyCur1Ctr xyCur2Ctr  cur1getHxyCur1Mat = []; xyCur2Mat = []; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% take care of various setup b^Hu^Hl^Hl^H detailscur1Style = ':';cur2Style = ':';figBGcolor = get(gcf,'color');if strcmp(figBGcolor,'none')   visFrameBGcolor = [0 0 0]; else   visFrameBGcolor = figBGcolor;endvisFrameColor = [1 .75 .75];mlVer = version;if mlVer(1) == '4'   ztlStr = 'ZTickLabels'; elseif mlVer(1) >= '5'   ztlStr = 'ZTickLabel';endif nargin ~= 1,   if exist('findHotW','file')      gf = findHotW;      if gf >= 1         figure(gf)       else         disp('zoomtool: no zoomable window found.')         return      end      end   fch = get(gcf,'Children');   ga = fch(strcmpi( get(fch,'Type'), 'Axes'));endif length(ga)~=1   disp('There are multiple axes in this figure. Zoomtool can not run.')   returnendoldBGcolor = get(ga, 'Color');%set(ga,'Color',[0 0 0]);% find parent windowgf = get(ga,'Parent');% get 'NextPlot'  we will restore this at the end (in zoomclr)oldWindNextPlot = get(gf, 'NextPlot');% get the window tag.  if it's an editing window, then quit.oldWindTag = get(gf, 'Tag');if strcmpi(oldWindTag(5:length(oldWindTag)),'editingwindow')   disp('Zoomtool doesn''t like Figure editing windows.')   returnend % check to see if there is more than one axis in the figure. if so, abortch = get(gf,'Children');count = 0;for i = 1:length(ch);   if strcmpi(get(ch(i),'type'),'axes')      count = count + 1;   endendif count~=1   disp('zoomtool: there must be exactly ONE graph in the figure window.')   returnend% check to see if already running in same figure windowif findpush(gf,'<<') & findline(ga,1001) %#ok<AND2>   disp('zoomtool: Only one zoomtool allowed in a single figure.')   returnend% crudely test to see if axes are 3d. if so, abortif ~isempty(get(ga,ztlStr))   disp('zoomtool: Use not available with 3D plots.')   returnend% If it passes all these tests, set its tag to show zoomtool is active.set(gf,'Tag', 'zoomed window');ztOrigXLims = get(ga, 'XLim');ztOrigYLims = get(ga, 'YLim');% cursor colors are saved in 'curscolr.mat'missingfileflag=0;% look for a preference file.% if there is no 'omprefs' folder in the MATLAB root, we will% create one and also create a prefs file.curdir = pwd;gp_err=0; gpCreatErr=0;cd(findztprefs)try load curscolr; catch, missingfileflag=1; endif ~exist('cur1Col','var')   cur1Col = [1.0 0.5 0.5];   % cursor colors: orangyendif ~exist('cur2Col','var')   cur2Col = [0.5 1.0 0.5];   % cursor colors: greenishendif missingfileflag && ~gpCreatErr   disp('"curscolr.mat" was missing from the ztPrefs dir in the zoomtool directory.')   disp('I will attempt to create it and save it there now.')   eval('save curscolr.mat cur1Col cur2Col')endcd( curdir )%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% set up for keypress functions (added by peg skelly)set( gf, 'KeyPressFcn', 'keycall( get(gcf,''CurrentCharacter'') )' );%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% get screen size & resize the plot% added by Jonathan Jacobs, February 1997init_fig_units = get(gf, 'Units');set(gf,'Units','Normalized');screen_size = get(0, 'ScreenSize');screen_width   = screen_size(3);screen_height  = screen_size(4);init_fig_size  = get(gf, 'Position');init_width  = init_fig_size(3);init_height = init_fig_size(4);% get last saved figure position,size (was written when ending zoomtool w/'Q')% and cursor erase modeztloaderrflag=0;cd(  matlabroot )if gp_err && gpCreatErr   ztloaderrflag=1; else	cd( findztprefs )   try load ztPrefs.mat; catch, ztloaderrflag=1; end   cd( curdir )end% since for proper behavior under ML6.5 it seems like we need to% force fig units to 'normalized' to get a reasonably sized window% sanity check that position sizes are within reasonable boundsif ~exist('zoom_fig_size','var')   ztloaderrflag=1;   zoom_fig_size = 0;endif any(zoom_fig_size>1), ztloaderrflag=1; endif (ztloaderrflag)   % could not read ztPrefs file   % so create values it should have given us   % first deal with window size...   if init_width/init_height > 1.4      % keep the same proportions once zoomed      scale_w = screen_width/init_width;      scale_h = screen_height/init_height;      scale_fac = 0.9*min(scale_w,scale_h);      new_height = scale_fac*init_height;      new_width  = scale_fac*init_width;    else      % unmodified intial figure window size      new_height  = 0.6;%*screen_height;       new_width   = 0.6;%*screen_width;   end   new_x_orig  = 0.2;%(screen_width-new_width)/2;   new_y_orig  = 0.2;%1.25*(screen_height-new_height)/2;   zoom_fig_size = [new_x_orig new_y_orig new_width new_height];   % ...finally, do not forget 'emode'    emode = 'xor';   %emode = 'normal'; else   %%% nothing to do, since all is well endset(gf, 'Position', zoom_fig_size );set(gf, 'Toolbar','figure');        %%% otherwise zoomtool forces it off. don't know why.% convert 'emode' string value to a popup menu control valueif strcmp('xor', deblank(emode))   emodval = 1; else   emodval = 2;end% get handles to all lines currently in axes (used here and later)[lcnt,linTemp] = cntlines(ga);% only choose the lines that have more than some number of data points% this lets zoomtool ignore things that are not really data.  (jj -- 9/97)lhand = zeros(1,lcnt); j=1;for i=1:lcnt   xtmp = get(linTemp(i),'Xdata');   if length(xtmp) > 4              %% place your favorite number here      lhand(j) = linTemp(i);      j = j + 1;   endendlcnt = j-1;set(gf,'UserData', lhand);% abort if axes is emptyif lcnt == 0,    disp('zoomtool: No lines in axes...');    returnend;if ~exist('C1Width','var'), C1Width = 2; endif ~exist('C2Width','var'), C2Width = 2; end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% get longest line in axes and use its xdata to set xlims for the axes.% (modification by Jonathan Jacobs)%[numLines, h] = cntlines(ga);numLines = lcnt;h = lhand;if numLines == 0   disp('No lines.  Just what did you plan to measure, anyway?')   returnendfound_one = 0;                    % flaglongest_x = 1; biggest_y = 1;     % which x is longest, which y is biggestlongest_i = 1; %biggest_i = 1;     % and what are their indices?for i = 1:length(h),   if h(i) == 0, break; end   found_one = 1;   xtemp = get(h(i),'XData');   ytemp = get(h(i),'YData');   if length(xtemp) > longest_x      longest_x = length(xtemp);      longest_i = i;   end   if max(ytemp) > biggest_y      biggest_y = max(ytemp);      %biggest_i = i;   endendif (found_one)   set(h(longest_i),'UserData','zoomed');   % setup for mouse movement or release   set(gf,'WindowButtonMotionFcn','');   set(gf,'WindowButtonUpFcn','');   x = get(h(longest_i),'XData');   y = get(h(longest_i),'Ydata');end;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% set all lines to toggle if selected% clicking on a new line calls ZOOMTGGL with 'howCalled' = 'lineClick'% insuring that ZOOMTGGL will toggle with the correct method% (remember that ZOOMTGGL can be called by keypress, toggle button or% line click.  See ZOOMTGGL for more info.)% put a frame behind the buttons.  We will hilite it when 'v' is pressed% and unlite it afterwards.linVisFrameH = uicontrol('Style','Frame','Pos',[5 5 78 lcnt*22+8],...                         'BackgroundColor',visFrameColor,'Vis','off');%%% bug? zoomtool forces toolbar off after the above line unless it is%%% explicitly set to 'figure', which is done ~130 lines above.linVisFrameBgH = uicontrol('Style','Frame','Pos',[8 8 69 lcnt*22+2],...                         'BackgroundColor',visFrameBGcolor);hLToggleFrame = zeros(1,lcnt); hLToggle = zeros(1,lcnt); %lcolr = zeros(lcnt,1); vis = zeros(1,lcnt); %%lhand = zeros(1,lcnt); for k = 1:lcnt,    tagStr = mat2str(lhand(k));    set(lhand(k),'ButtonDownFcn',...                 ('zoomtggl(get(gcf,''CurrentAxes''), ''line click'');'),...                  'Tag', tagStr);    % set up the buttons to show/hide data lines    % added by Jonathan Jacobs, February 1997    lcolr(k,:) = get(lhand(k), 'color');    if sum(lcolr(k,:)) < 1       fgColr = 'w';      else       fgColr = 'k';    end    vistemp = get(lhand(k), 'visible');    if length(vistemp) == 2      vis(k) = 1;     else      vis(k) = 0;    end    if (lcnt > 9)       if (k <= 9)          cboxStr = ['0' num2str(k) '  '];   % should ALWAYS have 4 characters        else                                 % in the string...          cboxStr = [num2str(k) '  '];       % whether or not we have        end                                   % double digits     else       cboxStr = [num2str(k) '   '];    end    hLToggleFrame(k) = uicontrol( 'Style','Frame','Units','pixels',...          'Position',[10 10+22*(k-1) 65 20],...           'BackgroundColor', lcolr(k,:),...          'ForegroundColor','k');    hLToggle(k) = uicontrol( 'Style','CheckBox','Units','pixels',...          'Position',[10 10+22*(k-1) 65 20],...          'String', cboxStr,...          'HorizontalAlignment', 'right',...          'BackgroundColor', lcolr(k,:),...          'ForegroundColor',fgColr,... %[.5 .5 .5],...          'UserData', lhand(k), 'Value', vis(k),...          'Tag', tagStr,...          'Callback', ('linetggl(get(gco,''UserData''),gcf);') );          %'ForegroundColor', lcolr(k,:),...          %'BackgroundColor', [.5 .5 .5],...end;% set data line to zoomdowntagStr = mat2str(h(longest_i));set(h(longest_i),'ButtonDownFcn','zoomdown', 'Tag', tagStr);% set the data line's toggle box legend to '<-'initStr = get(hLToggle(longest_i), 'String');initStr(3) = '<'; initStr(4) = '-';set(hLToggle(longest_i), 'String', initStr);set(hLToggle(longest_i), 'Fontweight', 'Bold');set(hLToggle(longest_i), 'Fontsize', 14);set(hLToggle(longest_i), 'FontAngle', 'ital');tempPos = get(hLToggle(longest_i), 'Position');tempPos(3) = 65;set(hLToggle(longest_i), 'Position', tempPos);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% get the extremes of all lines, this is necessary to set the %   y limits if the zoomtool is run against an axis that has %   already been zoomed and to show all the y data if the first %   line object in the stack does not contain the largest y %   values of all line objects (believe me, it's all true).extremes = zeros(lcnt,4);for i = 1:lcnt,    yt = get(lhand(i),'YData');    xt = get(lhand(i),'XData');    temp = min(xt( ~isnan(xt) ));    if isempty(temp), extremes(i,1) = 0; else extremes(i,1) = temp(1); end    temp = max(xt( ~isnan(xt) ));    if isempty(temp), extremes(i,2) = 0; else extremes(i,2) = temp(1); end    temp = min(yt( ~isnan(yt) ));    if isempty(temp), extremes(i,3) = 0; else extremes(i,3) = temp(1); end    temp = max(yt( ~isnan(yt) ));    if isempty(temp), extremes(i,4) = 0; else extremes(i,4) = temp(1); endend;clear yt xt% (no longer needed -- 09/07/97 jj)% all lines must have same X-axis extremes, can have different%   number of points in between%if all(extremes(:,1) ~= extremes(1,1)) | all(extremes(:,2) ~= extremes(1,2))%    disp('zoomtool: Lines must have same X-axis endpoint values...');%end;% get horizontal scalexlen = length(find(~isnan(x)));xmin = x(1);xmax = x(xlen);% set horizontal factor -- this assumes EQUALLY SPACED data.xfactor = (xmax - xmin) / (xlen - 1);set(get(ga,'xlabel'),'UserData',xfactor);% insure zoom is full%set(ga,'XLim',[xmin xmax]);lims = get(ga, 'XLim');set(ga, 'Xlim', [max(lims(1),xmin)  min(lims(2),xmax)])%if lims(2) > xmax%   set(ga, 'XLim', [lims(1) xmax])%end%if lims(1) < xmin%   set(ga, 'XLim', [xmin lims(2)])%end% set new y limits, ensure data not coincident to borderylim = [min(extremes(:,3)) max(extremes(:,4))];delta = (ylim(2) - ylim(1)) * 0.05;if delta == 0   delta = ylim(1)*0.25;endif delta == 0, delta = 1; endylim(1) = ylim(1) - delta;ylim(2) = ylim(2) + delta;set(ga,'YLim',ylim);% Y zoom is much simpler% add cursors to axisv1 = floor(xlen/4); + xmin;if (v1 > (lims(2)-xmin)/xfactor) || (v1 < (lims(1)-xmin)/xfactor)   v1 = floor( (lims(1)-xmin)/xfactor );endif v1<=0,v1=1;endv2 = floor(xlen*3/4); + xmin;if (v2 > (lims(2)-xmin)/xfactor) || (v2 < (lims(1)-xmin)/xfactor)   v2 = floor((lims(2)-xmin)/xfactor);endif v2<=0,v2=1;endh1 = y(v1);h2 = y(v2);if isnan(h2)   h2 = ( ylim(2)+ylim(1) )/2;end% reset right border to make room for buttonsoldaxunits = get(ga,'units');set(ga,'Units','normal');b_hite = 0.04;ax_pos = get(ga,'Position');init_ax_pos = ax_pos;ax_pos(2) = ax_pos(2) + b_hite;ax_pos(3) = ax_pos(3) - 0.065;ax_pos(4) = ax_pos(4) - 2*b_hite;set(ga,'Position',ax_pos);set(ga,'Units',oldaxunits);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% add title% added by Jonathan Jacobs & Peg Skelly%if ~exist('what_f_names') | length(what_f_names) < 1%   what_f_names = '-- ';%   titleStr = ' -- ';% else%   titleStr = what_f_names;%end%if length(what_f_names) > 30 titleStr = ' -- '; end%title( titleStr );%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% we can turn the cursors on, and we can turn them off.% added by Jonathan Jacobs & Peg Skellyrvbase = ax_pos(1);lvbase = rvbase + ax_pos(3);hbase = ax_pos(2) + ax_pos(4);b_width = b_hite;cur1VisFrameH = uicontrol('Style','Frame','Vis','Off','Units','Normal',...    'Position',[rvbase-0.005 hbase-0.005 5.45*b_width+0.0125 b_hite*2+0.01],...    'BackgroundColor',visFrameColor);cur1VisFrameBgH = uicontrol('Style','Frame','BackgroundColor',visFrameBGcolor,'Units','Normal',...     'Pos',[rvbase-0.00125 hbase-0.00125 5.45*b_width+0.005 b_hite*2+0.0025]);cur2VisFrameH = uicontrol('Style','Frame','Vis','Off','Units','Normal',...    'Position',[(lvbase-0.005)-5.5*b_width hbase-0.005 5.45*b_width+0.0125 b_hite*2+0.01],...    'BackgroundColor',visFrameColor);cur2VisFrameBgH = uicontrol('Style','Frame','BackgroundColor',visFrameBGcolor,'Units','Normal',...     'Pos',[(lvbase-0.0025)-5.5*b_width hbase-0.00125 5.45*b_width+0.005 b_hite*2+0.0025]);%%% hCur1Frame (and hCur2Frame) added to work around new bug that shows up in%%% OS X 10.5 where background colors of checkboxes (and other uicontrols) isn't%%% rendered AT ALL (ML bug #377211).hCur1Frame = uicontrol('Style','Frame','Units','normal',...    'BackGroundColor',cur1Col,...    'ForeGroundColor','k',...    'Position',[rvbase+0.001 hbase+b_hite 5.48*b_width b_hite]);    hCur1Box = uicontrol('Style','CheckBox','Units','normal',...    'BackGroundColor',cur1Col,...    'ForeGroundColor','k',...    'Position',[rvbase+0.001 hbase+b_hite 2.5*b_width b_hite],...    'String','  Cursor 1', 'FontWeight','bold', ...    'UserData', ga, 'Value',1,...    'CallBack', 'curtoggl(''curOne'');' );  hCur1Width = uicontrol('Style','PopUp','Units','normal',...    'BackGroundColor','w',...    'ForeGroundColor','k',...    'Position',[rvbase+0.12 hbase+b_hite 2.5*b_width b_hite],...    'String',{'narrow';'medium';'x-medium';'wide'}, 'FontWeight','normal', ...    'UserData', ga, 'Value', C1Width,...    'CallBack', 'curwidth(''curOne'');' ); hCurModeL = uicontrol('Style','Text','Units','normal',...    'BackgroundColor',[0.5 0.5 0.5],'ForegroundColor','w',...    'HorizontalAlignment','center',...    'Position',[rvbase+18*b_width hbase+b_hite 3.25*b_width 0.75*b_hite],...    'Visible','off',...    'String','Cursor Erase Mode');hCurMode = uicontrol('Style','popup','Units','normal','ForegroundColor','k',...    'Position',[rvbase+18*b_width hbase+0*b_hite 2.5*b_width b_hite],...    'value', emodval,'String','xor|normal',...    'Visible','off',...    'callback','cur_emode');% will create a rbzoom funct that checks state of button, changes text when toggled,% turns 'zoom' on or off, and calls 'autorange_y, newlims' to update when done w/zoomhRBZoomL = uicontrol('Style','Text','Units','normal',...    'BackgroundColor',[0.5 0.5 0.5],'ForegroundColor','w',...    'HorizontalAlignment','center',...    'Position',[rvbase+18*b_width hbase+b_hite 3.25*b_width 0.75*b_hite],...    'Visible','on',...    'String','Rubber Band zoom');hRBzoom = uicontrol('Style','Toggle','Units','normal','ForegroundColor','k',...    'Position',[rvbase+18*b_width hbase+0.1*b_hite 1.5*b_width 0.9*b_hite],...    'value', 0,'String','Off',...    'Visible','on',...    'callback','rbzoom(''zoom'')');hRBreset = uicontrol('Style','Pushbutton','Units','normal','ForegroundColor','k',...    'Position',[rvbase+19.75*b_width hbase+0.1*b_hite 1.5*b_width 0.9*b_hite],...    'value', 0,'String','Reset',...    'Visible','on',...    'UserData',hRBzoom,...    'callback','rbzoom(''reset'')');%set(hRBzoom,'UserData',hRBreset);hCur2Frame = uicontrol('Style','Frame','Units','normal',...    'BackGroundColor',cur2Col,...    'ForeGroundColor','k',...    'Position',[lvbase-5.49*b_width hbase+b_hite 5.49*b_width b_hite]);hCur2Box = uicontrol('Style','CheckBox','Units','normal',...    'BackGroundColor',cur2Col,...    'ForeGroundColor','k',...    'Position',[lvbase-5.49*b_width hbase+b_hite 2.5*b_width b_hite],...    'String','  Cursor 2',...    'UserData', ga, 'Value',1,...    'CallBack', 'curtoggl(''curTwo'');' );hCur2Width = uicontrol('Style','PopUp','Units','normal',...    'BackGroundColor','w',...    'ForeGroundColor','k',...    'Position',[lvbase-5.49*b_width+0.12 hbase+b_hite 2.5*b_width b_hite],...    'String',{'narrow';'medium';'x-medium';'wide'}, 'FontWeight','normal', ...    'UserData', ga, 'Value',C2Width,...    'CallBack', 'curwidth(''curTwo'');' ); % and we can change their color, too!hC1Color = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[rvbase+4*b_width hbase 1.5*b_width b_hite],...    'String','Color','UserData',gca,...    'Callback','curcolor(''curOne'');');hC2Color = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase-1.52*b_width hbase 1.5*b_width b_hite],...    'String','Color','UserData',gca,...    'Callback','curcolor(''curTwo'');');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% add cursor control buttons along top% store axis number in 'Value' property to use in callbackuicontrol('Style','Pushbutton','Units','normal',...    'Position',[rvbase hbase b_width b_hite],...    'String','<','UserData',gca,...    'Callback','zoomleft(get(get(gcf,''CurrentObject''),''UserData''),1);');uicontrol('Style','Pushbutton','Units','normal',...    'Position',[rvbase+b_width hbase b_width b_hite],...    'String','>','UserData',gca,...    'Callback','zoomrght(get(get(gcf,''CurrentObject''),''UserData''),1);');uicontrol('Style','Pushbutton','Units','normal',...    'Position',[rvbase+2*b_width hbase b_width b_hite],...    'String','<<','UserData',gca,...    'Callback','zoompklf(get(get(gcf,''CurrentObject''),''UserData''),1);');uicontrol('Style','Pushbutton','Units','normal',...    'Position',[rvbase+3*b_width hbase b_width b_hite],...    'String','>>','UserData',gca,...    'Callback','zoompkrt(get(get(gcf,''CurrentObject''),''UserData''),1);');uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase-5.5*b_width hbase b_width b_hite],...    'String','<','UserData',gca,...    'Callback','zoomleft(get(get(gcf,''CurrentObject''),''UserData''),2);');uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase-4.5*b_width hbase b_width b_hite],...    'String','>','UserData',gca,...    'Callback','zoomrght(get(get(gcf,''CurrentObject''),''UserData''),2);');uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase-3.5*b_width hbase b_width b_hite],...    'String','<<','UserData',gca,...    'Callback','zoompklf(get(get(gcf,''CurrentObject''),''UserData''),2);');uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase-2.5*b_width hbase b_width b_hite],...    'String','>>','UserData',gca,...    'Callback','zoompkrt(get(get(gcf,''CurrentObject''),''UserData''),2);');% Ready to actually make the cursors now...% This is a bit confusing, but it makes sense: cur1horH is the result of defining% a vertical cursor that will be drawn at a HORIZONTAL value.% Similarly, cur1vertH is the VERTICAL value at which a horizontal cursor was drawn.% (jbj -- 04/01/00 -- no fooling, really!)cur1horH  = crsrmake(ga,1001,'vertical',((v1-1)*xfactor)+xmin, cur1Style, cur1Col, hCurMode);cur1vertH = crsrmake(ga,1002,'horizontal',h1, cur1Style, cur1Col, hCurMode);cur2horH  = crsrmake(ga,2001,'vertical',((v2-1)*xfactor)+xmin, cur2Style, cur2Col, hCurMode);cur2vertH = crsrmake(ga,2002,'horizontal',h2, cur2Style, cur2Col, hCurMode);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% make the zoom in/out buttons for x, y, xyhandles = zeros(20,1);% zoom x iconsuicontrol('Style','Text','Units','normal','ForeGroundColor','white',...    'Position',[lvbase hbase-1*b_hite 3*b_width b_hite],...    'BackGroundColor',[0.5 0.5 0.5],...    'String','X axis zoom');handles(1) = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase hbase-2*b_hite 1.25*b_width b_hite],...    'String','in','UserData',[],...    'Callback','zoomxin(get(gcf,''CurrentAxes'')); autorange_y; newlims;');handles(2) = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase+1.25*b_width hbase-2*b_hite 1.25*b_width b_hite],...    'String','out','UserData',[],...    'Callback','zoomxout(get(gcf,''CurrentAxes'')); autorange_y; newlims;');handles(3) = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase+2.5*b_width hbase-2*b_hite 1.25*b_width b_hite],...    'String','full','UserData',[],...    'Callback','zoomxful(get(gcf,''CurrentAxes'')); autorange_y; newlims;');% zoom y iconsuicontrol('Style','Text','Units','normal','ForeGroundColor','white',...    'Position',[lvbase hbase-6*b_hite 3*b_width b_hite],...    'BackGroundColor',[0.5 0.5 0.5],...    'String','Y axis zoom');handles(4) = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase hbase-7*b_hite 1.25*b_width b_hite],...    'String','in','UserData',[],...    'Callback','zoomyin(get(gcf,''CurrentAxes'')); newlims;');handles(5) = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase+1.25*b_width hbase-7*b_hite 1.25*b_width b_hite],...    'String','out','UserData',[],...    'Callback','zoomyout(get(gcf,''CurrentAxes'')); newlims;');handles(6) = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase+2.5*b_width hbase-7*b_hite 1.25*b_width b_hite],...    'String','full','UserData',[],...    'Callback','zoomyful(get(gcf,''CurrentAxes'')); newlims;');% y autorangehYAutoRange = uicontrol('Style','checkbox','Units','normal',...    'ForeGroundColor','white',...    'Position',[lvbase hbase-10.1*b_hite 3.75*b_width b_hite],...    'String',' Y autorange',...    'BackGroundColor',[0.5 0.5 0.5],...    'Value',1,...    'Callback', ('if(get(gco,''value'')), autorange_y; end') );% zoom xy iconsuicontrol('Style','Text','Units','normal','ForeGroundColor','white',...    'Position',[lvbase hbase-12*b_hite 3*b_width b_hite],...    'BackGroundColor',[0.5 0.5 0.5],...    'String','XY zoom');handles(7) = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase hbase-13*b_hite 1.25*b_width b_hite],...    'String','in','UserData',[],...    'Callback',['zoomxin(get(gcf,''CurrentAxes''));',...    'zoomyin(get(gcf,''CurrentAxes''));newlims;']);handles(17) = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase+1.25*b_width hbase-13*b_hite 1.25*b_width b_hite],...    'String','out','UserData',[],...    'Callback',['zoomyout(get(gcf,''CurrentAxes''));',...    'zoomxout(get(gcf,''CurrentAxes''));newlims;']);handles(8) = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase+2.5*b_width hbase-13*b_hite 1.25*b_width b_hite],...    'String','full','UserData',[],...    'Callback',['zoomxful(get(gcf,''CurrentAxes''));',...    'zoomyful(get(gcf,''CurrentAxes''));newlims;']);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% editable axis limits boxes% added by Jonathan Jacobs  March 1996 - June 1996x_ax_lims = get(ga, 'XLim');y_ax_lims = get(ga, 'YLim');x_ax_low = x_ax_lims(1); x_ax_high = x_ax_lims(2);y_ax_low = y_ax_lims(1); y_ax_high = y_ax_lims(2);hXLow = uicontrol('Style','Edit','Units','normal',...   'Back', 'magenta', 'Fore', 'white',...   'Pos', [lvbase+1.25*b_width hbase-3*b_hite 2.5*b_width b_hite],...   'String', num2str(x_ax_low),...   'UserData', ga,...   'Callback', ('axman(''xLo''); autorange_y; newlims') );hXHigh = uicontrol('Style','Edit','Units','normal',...   'Back', 'magenta', 'Fore', 'white',...   'Pos', [lvbase+1.25*b_width hbase-4*b_hite 2.5*b_width b_hite],...   'String', num2str(x_ax_high),...   'UserData', ga,...   'Callback', ('axman(''xHi''); autorange_y; newlims') );uicontrol('Style','Text','Units','normal','ForeGroundColor','white',...    'Position',[lvbase hbase-3*b_hite 1.2*b_width b_hite],...    'BackGroundColor',[0.5 0.5 0.5],...    'String','Min');uicontrol('Style','Text','Units','normal','ForeGroundColor','white',...    'Position',[lvbase hbase-4*b_hite 1.2*b_width b_hite],...    'BackGroundColor',[0.5 0.5 0.5],...    'String','Max');hYLow = uicontrol('Style','Edit','Units','normal',...   'Back', 'magenta', 'Fore', 'white',...   'Pos', [lvbase+1.25*b_width hbase-9*b_hite 2.5*b_width b_hite],...   'String', num2str(y_ax_low),...   'UserData', ga,...   'Callback', ('axman(''yLo''); newlims;') );hYHigh = uicontrol('Style','Edit','Units','normal',...   'Back', 'magenta', 'Fore', 'white',...   'Pos', [lvbase+1.25*b_width hbase-8*b_hite 2.5*b_width b_hite],...   'String', num2str(y_ax_high),...   'UserData', ga,...   'Callback', ('axman(''yHi''); newlims;' ) );uicontrol('Style','Text','Units','normal','ForeGroundColor','white',...    'Position',[lvbase hbase-9*b_hite 1.2*b_width b_hite],...    'BackGroundColor',[0.5 0.5 0.5],...    'String','Min');uicontrol('Style','Text','Units','normal','ForeGroundColor','white',...    'Position',[lvbase hbase-8*b_hite 1.2*b_width b_hite],...    'BackGroundColor',[0.5 0.5 0.5],...    'String','Max');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% initialize counters into the [x], [x,y] matrices% added by Peg Skelly, July 1995% 'clear xyCur1Mat', 'clear xyCur2Mat' buttons% added by Jonathan Jacobs, March 1996xyCur1Ctr = 0;xyCur2Ctr = 0;% clear cursor 1 (x,y) info buttonhClrX = uicontrol('Style','Pushbutton','Units','normal',...	'Position',[lvbase hbase-14.5*b_hite 1.8*b_width b_hite],...    	'String','C1 clr','UserData',[],...    	'Tooltip','Clears ''xyCur1Mat''',...		'Callback', 'cursmatr(''cur1_clr'')' );% clear cursor 2 (x,y) info buttonhClrXY = uicontrol('Style','Pushbutton','Units','normal',...	'Posit',[lvbase+1.8*b_width hbase-14.5*b_hite 1.8*b_width b_hite],...		'String','C2 clr','UserData',[],...    	'Tooltip','Clears ''xyCur2Mat''',...		'Callback', 'cursmatr(''cur2_clr'')' );% cursor 1 (x,y) buttonhandles(18) = uicontrol('Style','Pushbutton','Units','normal',...	'Position',[lvbase hbase-15.5*b_hite 1.8*b_width b_hite],...    	'String','C1 get','UserData',[],...    	'Tooltip','Records cursor 1''s (x,y) co-ordinates to ''xyCur1Mat''',...		'UserData', hClrX,...		'Callback', 'cursmatr(''cur1_add'')' );    cur1getH = handles(18);% cursor 2 (x,y) buttonhandles(19) = uicontrol('Style','Pushbutton','Units','normal',...	'Posit',[lvbase+1.8*b_width hbase-15.5*b_hite 1.8*b_width b_hite],...	'String','C2 get','UserData',[],...    	'Tooltip','Records cursor 2''s (x,y) co-ordinates to ''xyCur2Mat''',...		'UserData', hClrXY,...		'Callback', 'cursmatr(''cur2_add'')' );%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	 % screen scrolling: added by Peg Skelly and Jonathan Jacobs% scroll half screen left buttonhandles(20) = uicontrol('Style','Pushbutton','Units','normal',...	'Position',[lvbase hbase-17*b_hite 1.5*b_width b_hite],...    	'Tooltip','Back 1/2 page',...	'String','<', 'Callback',...	'scrhlft(gca); autorange_y; newlims;');% scroll half screen right buttonhandles(21) = uicontrol('Style','Pushbutton','Units','normal',...	'Position',[lvbase+1.5*b_width hbase-17*b_hite 1.5*b_width b_hite],...    	'Tooltip','Ahead 1/2 page',...	'String','>','Callback',...	'scrhrt(gca); autorange_y; newlims;');% scroll left buttonhandles(22) = uicontrol('Style','Pushbutton','Units','normal',...	'Position',[lvbase hbase-18*b_hite 1.5*b_width b_hite],...    	'Tooltip','Back 1 page',...	'String','<<','Callback',...	'scrllft(gca); autorange_y; newlims;');% scroll right buttonhandles(23) = uicontrol('Style','Pushbutton','Units','normal',...	'Position',[lvbase+1.5*b_width hbase-18*b_hite 1.5*b_width b_hite],...    	'Tooltip','Ahead 1 page',...	'String','>>','Callback',...	'scrlrt(gca); autorange_y; newlims;');    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  hbase = ax_pos(2) - 2*b_hite;          % edit/text uicontrols readoutstbase = ax_pos(2) - 3*b_hite;          % text uicontrol labels% toggle iconhandles(16) = uicontrol( 'Style','Pushbutton','Units','normal',...    'Position',[lvbase+1.5*b_width hbase 1.5*b_width b_hite],...    'String','T','UserData',lhand,...    'Tooltip','Toggle cursor focus to next line',...    'Callback',('zoomtggl(get(gcf,''CurrentAxes''),''toggle button'');') );% turn off toggle button if not neededif lcnt == 1,    set(handles(16),'Visible','off');end;% set zoom full limitsset(handles(3),'UserData',[xmin xmax]);% get horizontal scaleylim = get(ga,'YLim');% set zoom full limitsset(handles(6),'UserData',ylim);% set up Clr button before changing b_width variablehandles(15) = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase hbase 1.5*b_width b_hite],...    'String','Q','UserData',[],...    'Tooltip','Quits zoomtool',...    'Callback',...    'zoomclr(get(gcf,''CurrentAxes''));');ztUpdateH = uicontrol('Style','Pushbutton','Units','normal',...    'Position',[lvbase hbase-1.1*b_hite 3*b_width b_hite],...    'String','Update','UserData',[],...    'Callback',...    ('zoomclr(get(gcf,''CurrentAxes'')); zoomtool;'));b_width = (lvbase - rvbase) / 6;v1 = crsrloc(ga,1001);v2 = crsrloc(ga,2001);h1 = crsrloc(ga,1002);h2 = crsrloc(ga,2002);handles(9) = uicontrol('Style','edit','Units','normal',...    'BackgroundColor','magenta','ForeGroundColor','white',...    'Position',[rvbase+0*b_width hbase b_width*.9 b_hite],...    'String',num2str(v1),'UserData',gca,'Value',3001,...    'Callback','zoomset(get(get(gcf,''CurrentObject''),''UserData''),1);');cur1LblX = uicontrol('Style','text','Units','normal',...    'BackGroundColor',cur1Col,...    'ForeGroundColor','k',... %[0.5 0.5 0.5],...    'Position',[rvbase+0*b_width tbase b_width*.9 b_hite],...    'String','-- X --');handles(10) = uicontrol('Style','text','Units','normal',...    'BackGroundColor',[0.5 0.5 0.5],...    'ForeGroundColor','white',...    'Position',[rvbase+1*b_width hbase b_width*.9 b_hite],...    'String',num2str(h1),'UserData',gca);cur1LblY = uicontrol('Style','text','Units','normal',...    'Position',[rvbase+1*b_width tbase b_width*.9 b_hite],...    'ForeGroundColor','k',... %[0.5 0.5 0.5],...    'BackGroundColor',cur1Col,...    'String','-- Y --');handles(11) = uicontrol('Style','edit','Units','normal',...    'Position',[rvbase+4*b_width hbase b_width*.9 b_hite],...    'String',num2str(abs(v2-v1)),'UserData',gca,'Value',3003,...    'BackGroundColor','magenta','ForeGroundColor','white',...    'Callback','zoomset(get(get(gcf,''CurrentObject''),''UserData''),3);');uicontrol('Style','text','Units','normal',...    'Position',[rvbase+4*b_width tbase b_width*.9 b_hite],...    'BackGroundColor',[0.5 0.5 0.5],...    'ForeGroundColor','white',...    'String','Delta X');handles(12) = uicontrol('Style','text','Units','normal',...    'Position',[rvbase+5*b_width hbase b_width*.9 b_hite],...    'BackGroundColor',[0.5 0.5 0.5],...    'ForeGroundColor','white',...    'String',num2str(abs(h2-h1)),'UserData',gca);uicontrol('Style','text','Units','normal',...    'Position',[rvbase+5*b_width tbase b_width*.9 b_hite],...    'BackGroundColor',[0.5 0.5 0.5],...    'ForeGroundColor','white',...    'String','Delta Y');handles(13) = uicontrol('Style','edit','Units','normal',...    'Position',[rvbase+2*b_width hbase b_width*.9 b_hite],...    'String',num2str(v2),'UserData',gca,'Value',3002,...    'BackGroundColor','magenta','ForeGroundColor','white',...    'Callback','zoomset(get(get(gcf,''CurrentObject''),''UserData''),2);');cur2LblX = uicontrol('Style','text','Units','normal',...    'Position',[rvbase+2*b_width tbase b_width*.9 b_hite],...    'ForeGroundColor','k',... %[0.5 0.5 0.5],...    'BackGroundColor',cur2Col,...    'String','-- X --');handles(14) = uicontrol('Style','text','Units','normal',...    'Position',[rvbase+3*b_width hbase b_width*.9 b_hite],...    'BackGroundColor',[0.5 0.5 0.5],...    'ForeGroundColor','white',...    'String',num2str(h2),'UserData',gca);cur2LblY = uicontrol('Style','text','Units','normal',...    'Position',[rvbase+3*b_width tbase b_width*.9 b_hite],...    'ForeGroundColor','k',... %[0.5 0.5 0.5],...    'BackGroundColor',cur2Col,...    'String','-- Y --');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% put all the important handles into the axes' UserData so we can access% their respective controls from subfunctions w/o having to make globals% there are 23 'handles()' entries and 40 'myHandles()' entries.% added by Jonathan JacobsmyHandles = {cur1horH         cur1LblX         cur1LblY         cur1vertH,...                cur1VisFrameBgH  cur1VisFrameH    cur2horH         cur2LblX,...             cur2LblY         cur2vertH        cur2VisFrameBgH  cur2VisFrameH,...             hC1Color         hC2Color         hClrX            hClrXY,...             hCur1Box         hCur2Box         hCurMode         hLToggle,...             hXHigh           hXLow            hYAutoRange      hYHigh,...             hYLow            lhand            linVisFrameBgH   linVisFrameH,...             oldBGcolor       oldWindNextPlot  oldWindTag       ztOrigXLims,...             ztOrigYLims      ztUpdateH        init_fig_size	 init_fig_units ...             hRBzoom          init_ax_pos	     hCur1Frame		 hCur2Frame...             hLToggleFrame		hRBreset         hCur1Width       hCur2Width};     handleList = {handles; myHandles};set(ga,'UserData',handleList);curwidth('curOne')curwidth('curTwo')%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% activate the Y-autorangeif get(hYAutoRange,'Value')  autorange_yend% do not allow another plot to be added without first closing the zoomtool.if mlVer(1) == '4'   %set(gf,'NextPlot','New');endset(gf,'CurrentAxes',ga);