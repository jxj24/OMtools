% NAFX.m: nystagmus foveation functions.%% **** NOTE: for best results, low-pass filter the position data ****% ****       at around 15-25 Hz before using these functions.    ****%% Helpful Hint: This are so many parameters that you really should be using the GUI% to do NAFX calculations. It is a hell of a lot easier. Really.% If you call nafx without any input arguments, the GUI will automatically run.%% But if you are determined to do it the hard way, read on...%%  1) Display of foveation functions:%            'showp', 'showv', 'showpv'  <-- Show the points that meet%                                             pos/vel criteria%   Usage:%   [posLimPts, velLimPts, fovLimPts]%      = nafx(pos, vel, samp_freq, [posLim,velLim], 'func', dblPlot, ...%             tau_vers, age_range, fovstats)%%     Where: dblPlot = 1 will plot position and velocity on a single graph%            dblPlot = 2 will plot position and velocity on separate graphs%            dblPlot = 3 will not plot position and velocity%   Example:%         'nafx(pos,vel,samp_freq,[poslim,vellim],'showpv',0/1);'%          empty argument (ie, []) uses default for that parameter%          >>Displays the number of foveation periods<<%%    NOTES:%        For [posLim,velLim], to use the default limits of 0.5 degrees%        and 4.0 degrees/sec, you may simply pass an empty array ('[]').%        You must explicitly specify output arguments%        if you want access to their values.%%  2) Acuity functions:%            'nafx'%   Usage:%   [NAFXval, NAFXPval, FovTime/fov period, FovTime/sec, STDpos, STDvel]%      = nafx(pos, vel, samp_freq, #foveations, 'func', [tauIn posLim velLim]);%   Example:%         'nafx(pos,vel,sampfreq,#fovs,'nafx',[tauIn,posLim,velLim]);'%              [0,0,0] forces default values for tauIn,posLim,velLim%          >>Displays all NAF data<<%%    NOTES:%       Use of zero for any of [tauIn, posLim, velLim] will cause NAFX to%         use that argument's CALCULATED or DEFAULT value, while setting%         any of [tauIn, posLim, velLim] > 0 will override any%         internally set/calculated tau, pos, vel limits.%       It is not necessary to call 'NAFX' with output arguments, since the%         program will display them as they are calculated.)%%  Allowed foveation window values:  (10/13/99)  [from avg tau-plane from ARVO 1998]%  xpos = [0.5 0.75 1.0 1.25 1.5 2.0 2.5 3.0 3.5 4.0 5.0 6.0];%  yvel = [4.0 5.0  6.0 7.0  8.0 9.0 10.0];% written by:  Jonathan Jacobs%              September 1997 - July 2018 (last mod: 07/12/18)%              ('NAF' code based on 'NFF.AST' by LFD and NVS)function [out1, out2, out3, out4, out5, out6] ...   = nafx(posArray, velArray, samp_freq, inp4, funct, inp6, ...   use_tau_v2, age_range,fovstats)if nargin<5   nafx_gui   returnendnafxFig = findme('NAFXwindow');if ishandle(nafxFig)   temp = nafxFig.UserData;   h = temp{1};   %linelist = temp{2};   %samp_freq = str2double(h.sampFreqH.String);   use_tau_v2 = h.tauVersH.Value;else   if ~exist('use_tau_v2','var') || isempty(use_tau_v2) || isnan(use_tau_v2)      use_tau_v2 = 1;   endendif nargout == 6, NAFshowOutput = 0;else,            NAFshowOutput = 1;enddataname = evalin('base','dataname');comp = computer;vers = version;if vers(1) >= '6'   degstr = '\circ';   pmstr  = '\pm';else   if comp(1) == 'M'      degstr = '¡';      pmstr = '±';   else      degstr = ' deg';      pmstr = '+/-';   endend% determine the background color for new figstempfig = figure('Visible','off');bg_color = get(tempfig,'color');close(tempfig)if bg_color(1) >= 0.5   le_color='g'; re_color='b';else   le_color='y'; re_color='c';endtry   posArrayName = h.posArrayNAFXH.String;catch   posArrayName = '';endif ~exist('posArrayName','var'), posArrayName = ''; end%chStr = '';pColorStr = 'y';     		% default valueif ~isempty(posArrayName)   % which eye   if strcmpi(posArrayName(1),'r')      pColorStr = re_color;   elseif strcmpi(posArrayName(1),'1')      pColorStr = le_color;   else      pColorStr = 'm';   end   % concat eye and plane to get name of channel   %chStr = [' (' posArrayName(1) posArrayName(2) ')'];endif ~isempty(posArrayName)   dataseg = nameclean([' (' posArrayName ') ']);else   dataseg = '';end% was the subject's age range specified?  If not, look for the value from the GUI.% We subtract 1 from the popup menu value because 1st entry is reminder to SELECT AGE.% Why?  Because it's WAAAAAAAY too easy to forget and use the wrong age.% if the GUI isn't open, then ask user for input.input_age_flag = 1;if nargin<8   if ishandle(h.nafx2snelH)      age_range = h.nafx2snelH.Value-1;      if age_range >=1         input_age_flag = 0;      end   end   if input_age_flag == 1      disp(' ')      disp('Enter the subject''s age:')      disp(' 1) under 6 years old')      disp(' 2) from 6 to 12 years old')      disp(' 3) from 12+ to 40 years old')      disp(' 4) from 40+ to 60 years old')      disp(' 5) greater than 60 years old')      disp(' 6) A dog of any age')      age_range=0;      while age_range<1 || age_range>6         commandwindow         age_range = input('--> ');      end      disp(' ')      if ~isempty(h.nafx2snelH)         h.nafx2snelH.Value=age_range+1;      end   endelse   if age_range<1 || age_range>6      disp('Command line input error: age range must be an argument from 1 to 6. ')      return   endendmode = 'cmdl';funct = lower(funct);if contains(funct,'gui')   mode = 'gui';   funct = funct(1:end-3);enddblPlot = 1;  % default is '1': individual plotsuseTauIn = 0;if nargin >= 6   if strcmpi(funct(1:3), 'sho')  % showp, showv showpv      dblPlot = inp6(1);   else      tauIn = inp6(1);      useTauIn = 1;   endelse   inp6=0;endif nargin < 7   use_tau_v2 = 1;  % default value for Tau Plane v2endif use_tau_v2,NAFXvers = '2.0';else,         NAFXvers = '1.0';endif strcmpi(mode,'gui')   if ~isempty(h.tauNAFXH)      tauIn = h.tauNAFXH.String; % time in ms      if strcmpi(tauIn,'empty')         useTauIn = 0;      else         useTauIn = 1;         tauIn = str2double(tauIn);      end   else      useTauIn = 1;   endend% can only work on one file at a time[r,c]=size(posArray);if min(r,c)>1   disp('NAFX requires exactly ONE channel of data (ie, a 1-D array).')   %disp('Use PICKDATA to select your data')   returnend% default settingsposLim = 0.5;velLim = 4.0;     % with "lsh01_1.txt", all vels come in quanta of 2.03xxx% so a lim of 4.0 cuts off the 4.06deg/sec values. This% may be fixed when I use a better tech for determining% when foveation is occurring?% what were posLim and velLim?if length(inp6)>1   if isempty(inp6(2)) || inp6(2)==0      %   else      posLim = inp6(2);   endendif length(inp6)>2   if isempty(inp6(3)) || inp6(3)==0      %   else      velLim = inp6(3);   endend% hardwired settings for expanded functions. these overide any passed in.if strcmpi(funct,'nafx')   % ONLY nafx can use posLim,velLim args passed in.   %tauPV = 183.8885*(1-exp(-velLim*posLim/10));  % 168.7940   %tauPV = 250*(1-exp(-velLim*posLim/10));      % 229.4788   %tau = 150;   % we will insert a table lookup here. Values in the table   % will come from an average tau-plane generated elsewhere   % this is ugly, and I'd like to pretend it never happened   xpos = [0.5 0.75 1.0 1.25 1.5 2.0 2.5 3.0 3.5 4.0 5.0 6.0];   yvel = [4.0 5.00 6.0 7.00 8.0 9.0 10.0];   tauPV_1(1,:) = [33.30 32.00 31.30 31.07 30.33 29.77 29.73 29.88 30.03 30.22 30.45 30.59];   tauPV_1(2,:) = [42.30 41.00 41.13 40.53 39.74 39.09 39.31 39.55 39.75 39.99 40.30 40.48];   tauPV_1(3,:) = [51.42 50.53 50.36 50.58 49.17 48.12 48.14 47.93 48.52 48.85 49.23 49.44];   tauPV_1(4,:) = [53.63 55.60 56.83 56.97 56.14 55.07 54.61 54.94 55.61 55.99 56.43 56.68];   tauPV_1(5,:) = [57.07 59.36 60.68 60.88 60.01 58.88 58.44 58.80 59.53 59.95 60.44 60.72];   tauPV_1(6,:) = [59.75 63.93 67.11 66.83 67.59 66.66 66.30 66.80 67.62 68.09 68.66 68.97];   tauPV_1(7,:) = [63.03 66.59 73.72 77.30 78.63 77.71 78.35 79.00 79.92 80.44 81.10 81.45];   tauPV_2(1,:) = [33.30 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00 33.00];   tauPV_2(2,:) = [38.92 39.04 39.17 39.29 39.41 39.65 39.88 40.11 40.33 40.53 40.87 41.04];   tauPV_2(3,:) = [47.14 47.24 47.33 47.42 47.52 47.70 47.88 48.06 48.24 48.41 48.75 49.09];   tauPV_2(4,:) = [54.01 54.45 54.76 54.99 55.17 55.45 55.68 55.89 56.10 56.30 56.72 57.13];   tauPV_2(5,:) = [61.45 61.96 62.35 62.64 62.88 63.25 63.54 63.80 64.03 64.26 64.72 65.17];   tauPV_2(6,:) = [63.76 67.95 69.26 69.76 70.02 70.40 70.75 71.10 71.45 71.80 72.50 73.22];   tauPV_2(7,:) = [61.96 69.08 73.20 75.60 77.02 78.45 79.10 79.50 79.82 80.12 80.69 81.26];   if use_tau_v2, tauPV = tauPV_2;   else,          tauPV = tauPV_1;   end   xindex = find(xpos==posLim);   yindex = find(yvel==velLim);   % this is NOT a mistake. This IS the proper order.   tau = tauPV(yindex,xindex);    %#ok<FNDSB>elseif strcmpi(funct(1:3),'sho')  % showp, showv showpv   % if we don't specity lims in 'inp4', use defaults   if ~isempty(inp4)      posLim = inp4(1); velLim = inp4(2);   endelse   disp('unknown function')   returnendif useTauIn   %disp('using tauIn')   if tauIn > 0      tau = tauIn;   endend% from here onward, all our case-specific variables have been settotalDur  = length(posArray)/samp_freq;       % in millisecondsposLimPts = find( abs(posArray) <= posLim );  % all points in foveal extentvelLimPts = find( abs(velArray) <= velLim );  % all points that are < slip vel% intersection of these criteria gives all points% that fall within the foveation window.posVelPts = find( (abs(velArray) <= velLim) & (abs(posArray) <= posLim) );if strcmpi(funct,'showpv') || strcmpi(funct,'showvp')   fovlist = posVelPts;elseif strcmpi(funct,'showp')   fovlist = posLimPts;elseif strcmpi(funct,'showv')   fovlist = velLimPts;else   fovlist = posVelPts; % NAFX calc MUST satisfy P & V!!!!!endif NAFshowOutput, suppress=0;else, suppress=1;end% this is VERY different from 'nff' because here we are using 'detectfovs'% to determine the list of fovWinPts that will be used to calculate the nafx.% In 'nff' the list was simply the points that satisfied pos and vel criteria% simultaneously, without the additional processing that 'detectfovs' adds% (i.e. joining segments and deleting isolated points.)if nargin < 9   fovstats = 'n';endif isempty(fovlist)   disp('No foveation points detected. You may need to shift the position array.')   returnelse   [numfov,fovWinPts,DFvers] = ...      detectfovs(fovlist,posArray,suppress,funct,fovstats);endt = maket(posArray,samp_freq);if strcmpi(mode,'gui') && contains(funct,'show')   h.tauNAFXH.String='empty';   h.numFovNAFXH.String=num2str(numfov);endif size(fovWinPts) <= 1   disp( 'Need more foveation points for analysis to be valid.')   commandwindow   yorn=input('Show anyway (y/n)? (You have been warned!)','s');   if ~strcmpi(yorn,'y')      return   endendFWposArray = stripnan(posArray(fovWinPts));FWvelArray = stripnan(velArray(fovWinPts));fovSize   = length(fovWinPts);      % number of good pointsfovDur    = 1000*fovSize/samp_freq; % in millisecondsfovPerSec = fovDur/totalDur;        % avg ms of fov per secondif ~strcmpi(funct(1:3), 'sho')   if isempty(inp4)      disp('Enter or calculate the number of foveations.')      return   end   fovPerCyc = fovDur/inp4;  % avg ms of fov per cycleend                          % inp4 = # of foveations%     Foveation display section%% if all we want to do is see what points satisfy our% pos/vel limits then plot them and returnif strcmpi(funct(1:3), 'sho')  % showp, showv showpv   % initialize the over-plotting arrays   pLimArray = NaN*ones(length(posArray),1);   vLimArray = NaN*ones(length(velArray),1);   if strcmpi(funct,'showpv') || strcmpi(funct,'showvp')      % then fill them with only the appropriate pts      pLimArray(posVelPts) = posArray(posVelPts);      vLimArray(posVelPts) = velArray(posVelPts);      t1 = ([upper(nameclean(dataname)) dataseg ': Vel. points within '...         pmstr num2str(posLim) degstr ' by ' num2str(velLim) degstr '/sec window']);      t2 = ([upper(nameclean(dataname)) dataseg ': Pos. points within '...         pmstr num2str(posLim) degstr ' by ' num2str(velLim) degstr '/sec window']);      t3 = ([upper(nameclean(dataname)) dataseg '  ' num2str(totalDur) ' sec:  ' ...         num2str(numfov) ' Foveations identified within '...         pmstr num2str(posLim) degstr ' by ' num2str(velLim)  degstr '/sec window']);   elseif strcmpi(funct,'showp')      pLimArray(posLimPts) = posArray(posLimPts);      vLimArray(posLimPts) = velArray(posLimPts);      t1 = ([ upper(nameclean(dataname)) dataseg ': Vel. points within '...         'position limit of ' pmstr num2str(posLim) degstr]);      t2 = ([ upper(nameclean(dataname)) dataseg ': Pos. points within '...         'position limit of ' pmstr num2str(posLim) degstr]);      t3 = ([upper(nameclean(dataname)) dataseg ':  ' num2str(numfov) ' '...         ' Foveations identified within '...         'the ' pmstr num2str(posLim) degstr ' limit']);   elseif strcmpi(funct,'showv')      pLimArray(velLimPts) = posArray(velLimPts);      vLimArray(velLimPts) = velArray(velLimPts);      t1 = ([upper(nameclean(dataname)) dataseg ...         ': Vel. points within velocity limit of ' pmstr num2str(velLim) degstr ]);      t2 = ([upper(nameclean(dataname)) dataseg ...         ': Pos. points within velocity limit of ' pmstr num2str(velLim) degstr ]);      t3 = ([upper(nameclean(dataname)) dataseg ':  ' num2str(numfov) ' '...         ' Foveations identified within '...         'the ' pmstr num2str(velLim) degstr '/sec limit']);   end   % 1st figure: show the raw points that satisfy both pos and vel limits   % plotted on top of the separate pos and velocity traces.   if NAFshowOutput      if dblPlot==3         % skip the first plot      else         if dblPlot==1            pv=figure;            subplot(2,1,1); box on         elseif dblPlot==2            v=figure;         end         hold on         plot(t,velArray, pColorStr); box on         p2 = plot(t,vLimArray,'m'); box on         set(p2,'LineWidth',2);         set(p2,'LineStyle','-');         set(p2,'Marker','*');         set(p2,'MarkerSize',2);         set(p2,'MarkerEdgeColor','r');         title(t1)         drawrad(0,velLim);         set(gca,'XLim',[t(1), t(end)]);         if dblPlot==1            subplot(2,1,2); box on         elseif dblPlot==2            p=figure;         end         set(gca,'XLim',[t(1), t(end)]);         hold on         plot(t,posArray, pColorStr); box on         p2 = plot(t,pLimArray,'m'); box on         set(p2,'LineWidth',2);         set(p2,'LineStyle','-');         set(p2,'Marker','*');         set(p2,'MarkerSize',2);         set(p2,'MarkerEdgeColor','r');         title(t2)         drawrad(0,posLim);         set(gca,'XLim',[t(1), t(end)]);         if dblPlot==1 %together            figure(pv);            subplot(2,1,1);ylabel(['Eye Velocity (' degstr '/sec)']);            subplot(2,1,2);xlabel('Time (sec)');            ylabel(['Eye Position (' degstr ')']);         elseif dblPlot==2            figure(v);xlabel('Time (sec)');            ylabel(['Eye Velocity (' degstr '/sec)']);            figure(p);xlabel('Time (sec)');            ylabel(['Eye Position (' degstr ')']);         end      end      disp(['Total time: ' num2str(length(posArray)/samp_freq) ' sec. (' ...         num2str(length(posArray)) ' samples)' ])      disp(['Total time that meets position criterion = '...         num2str(1000/samp_freq*length(posLimPts)) ' msec.' ...         '    (' num2str(length(posLimPts)) ' samples) '] )      disp(['Total time that meets velocity criterion = '...         num2str(1000/samp_freq*length(velLimPts)) ' msec.' ...         '    (' num2str(length(velLimPts)) ' samples) '] )      disp(['Total time that meets both criteria      = '...         num2str(1000/samp_freq*length(fovlist)) ' msec.' ...         '    (' num2str(length(fovlist)) ' samples) [raw] '] )      disp(['Total time that meets both criteria      = '...         num2str(1000/samp_freq*length(fovWinPts)) ' msec.' ...         '    (' num2str(length(fovWinPts)) ' samples) '] )      disp(['There were (probably) ' num2str(numfov)...         ' foveation periods in this interval.'])      disp('Cycles by manual count: ')      disp(' ')   end %if NAFshowOutput   % second figure   % guess how many foveations and overplot them on the pos/vel data   pLimArray = NaN*ones(length(posArray),1);   pLimArray(fovWinPts) = posArray(fovWinPts);   %vLimArray = NaN*ones(length(velArray),1);   %vLimArray(fovWinPts) = velArray(fovWinPts);   if NAFshowOutput      figure;      hold on      plot(t,posArray, pColorStr); box on      p2 = plot(t,pLimArray,'m'); box on      set(p2,'LineWidth',2);      set(p2,'LineStyle','-');      set(p2,'Marker','*');      set(p2,'MarkerSize',2);      set(p2,'MarkerEdgeColor','r');      set(gca,'XLim',[t(1), t(end)]);      drawrad(0,posLim);      ept      title(t3)   end %if NAFshowOutput   % set our output variables   out1 = posLimPts;   out2 = velLimPts;   out3 = posVelPts;   out4 = numfov;   out5 = fovWinPts;   returnend%%    NAFX calculation%STDpos = std(FWposArray);STDvel = std(FWvelArray);% for NAFnormfac = 0.5/posLim;   % normalized to standard limsVARpos = STDpos^2;pooledVar = 0.5*( VARpos + (STDvel*(posLim/velLim))^2 );pooledSTD = sqrt(pooledVar);% check to see if enough foveation for realistic resultsif fovPerSec <= 2000/samp_freq   disp('Insufficient foveation time for reasonable analysis.')   commandwindow   yn=lower(input('Be unreasonable and override anyway (y/n)? ','s'));   if yn~='y'      %fovFlag = 0;      return   endendNAFXval = (1-pooledSTD*normfac) * (1-exp(-fovPerCyc/tau));NAFPval = (1-STDpos*normfac)    * (1-exp(-fovPerCyc/tau));if strcmpi(mode,'gui')   h.tauNAFXH.String=num2str(tau);   h.NAFXvalH.String=num2str(NAFXval);endage_range_str={'under 6 years old'; '6 to 12 years old'; '12+ to 40 years old'; ...   '40+ to 60 years old'; '60+ years old'; 'canine (any age)'};if (NAFshowOutput)      % add a condition for suppression of printout.   disp(['results: (using NAFX vers. ' NAFXvers ', DetectFovs vers. ' DFvers ')'])   if strcmpi(funct(1:3),'naf')      snel = va2nafx(2,NAFXval,age_range,1);      if isnan(snel), snel = '20/1,250,000';end      disp(['                     NAFX = ' num2str(NAFXval,3) '  (<= ' snel ')  --  ' ...         age_range_str{age_range}])      %disp(['NAF(X) (for position only) = ' num2str(NAFPval)])      disp(['Fov. time per fov. period = ' num2str(fovPerCyc,3) ' msec'])      disp(['     Fov. time per second = ' num2str(fovPerSec/1000,3) ' sec'])      disp(['            STD(pos, vel) = (' num2str(STDpos,3) ' deg, ' ...         num2str(STDvel,3) ' deg/sec)'])      disp(['    Fov. window (pos, vel): (' num2str(posLim) ' deg, ' ...         num2str(velLim) ' deg/sec)'])      disp(['                       tau: ' num2str(tau,3) ' msec'])      disp('')   endend% set our output variablesassignin('base','NAFXval', NAFXval)out1 = NAFXval;out2 = NAFPval;out3 = fovPerCyc;out4 = fovPerSec;out5 = STDpos;out6 = STDvel;return%%%%%%%%% nameclean.m: allow underscores and carets to print as is, rather than% interpreting them as sub- and superscripts.% usage: out = nameclean(in)% Written by:  Jonathan Jacobs%              July 2002  (last mod: 07/25/02)function out = nameclean(in)if ~isempty(in)   out = strrep(in,'_','\_');   out = strrep(out,'^','\^');   out = strrep(out,'''','');else   out = '';end