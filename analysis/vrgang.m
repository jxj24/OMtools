% VrgAng.m: Use IPD to calculate Convergence Angle of LED's on stimulus bar.% Usage: out or [out1,out2] = vrgang(LEDnum_or_conv, ipd, cnv1, inputValue)%% where LEDnum_or_conv = 1 converts LEDnum to Convergence Angle (in deg)%                      = 2 converts Convergence Angle (in deg) to LEDnum% 		ipd is interpupillary distance.% 		cnv1 is convergence angle to LED 1 (in PD).% 		inputValue is: the LEDnum to be converted (1-9, where 9=FAR=1524mm) or% 					   the Convergence Angle to be converted (in deg).% Distance of LEDnum and Interpupillary Distance must be SAME units.%% Alternatively, you can simply type "VrgAng" and follow the prompts.% Written by:  L.F. Dell'Osso% Based on dist2conv.m%              November 2001 - May 2002 (last mod: 12/17/04)function [out1,out2] = vrgang(LEDnum_or_conv, ipd, cnv1, inpVal)if nargin == 0   LEDnum_or_conv = -1;   ipd=-1;   cnv1=-1;   inpVal=-1;   verbose=1; else   verbose=0;endwhile(LEDnum_or_conv<1) || (LEDnum_or_conv>2)   disp(' 1) Convert LEDnum to Convergence Angle')   disp(' 2) Convert Convergence Angle to LEDnum')   LEDnum_or_conv = input(' --> ');endwhile(ipd<0)   ipd = input('Enter the Interpupillary Distance (mm): ');endwhile(cnv1<0)   cnv1 = input('Enter the Convergence Angle for LED 1 (e.g., 20, 31.5, 60, ...PD): ');end% This line calculates d1 correctly for ALL positive PDd1 = (ipd/2)/tan(0.57*cnv1*pi/360);	%%#¡=#(PD/2)(0.57) & #rad=(pi/180)(#¡)% The next 17 lines are history% This line calculates d1(LED 1==20D) incorrectly to match Shouchen's numbers% d1 = 236.3729 + (ipd/2)/tan(17.3*pi/180);	%%10Dnot=17.3¡ & #rad=(pi/180)(#¡)% Use these lines to calculate LED angles for lfd using Shouchen's bar and the LED 1% distances of 332, 106, and 103mm that we used in our initial experiments% d1 = 332;	%%2nd experiment% d1 = 106;	%%3rd and 4th experiments% d1 = 103;	%%5th experiment% if cnv1 == 20	% This line calculates d1=d20 correctly% 	d1 = (ipd/2)/tan(5.7*pi/180);	%10D=5.7¡ & #rad=(pi/180)(#¡)%  elseif cnv1 == 30	% This line calculates d1=d30 correctly% 	d1 = (ipd/2)/tan(8.55*pi/180);	%15D=8.55¡ & #rad=(pi/180)(#¡)%  else	% This line calculates d1=d40 correctly% 	d1 = (ipd/2)/tan(11.4*pi/180);	%20D=11.4¡ & #rad=(pi/180)(#¡)% end% The next line matches Shouchen's LED barLEDdelta = [ 0 38.3 86.9 147.9 230.2 344.4 515.4 804.1] ;% The next line needs to be used if new LED bar is made)% LEDdelta = [ 0 35.5 83.1 142.4 221.5 320.7 498.1 774.7] ;if LEDnum_or_conv == 1  %%Calc verge angle for given LED   LEDnum=inpVal;   while (LEDnum<0)      LEDnum = input('Enter the LED number (unitless): ');   end      if LEDnum == 9      dist = 1524;  % FAR distance, i.e. to LED arc on wall    else        dist = d1 + LEDdelta(LEDnum);   end   conv = 2*(180/pi)*atan(ipd/(2*dist));  %%2*180 yields full angle from half (one-eye) angle   if verbose      disp(['  Convergence Angle is ' num2str(conv,2) ' deg'])      disp(['  Distance to LED 1 (' num2str(cnv1) ' D) is ' num2str(round(d1)) ' mm'])      return   end   out1 = conv;   out2 = d1; else   conv=inpVal;   while (conv<0)      conv = input('Enter the convergence angle (degrees): ');   end      dist = (ipd/2)/tan(conv*pi/360);      % Create array of distances and find which LED is closest to the desired verge angle   LEDdist = d1 + LEDdelta;   c = abs(LEDdist-dist);   d = find(c==min(c));   LEDdist(d);   LEDang = (360/pi)*atan(ipd./(2.*LEDdist));   FARang = (360/pi)*atan(ipd./(2*1524));            if verbose      disp(['  The closest LEDnum to the desired convergence angle is ' num2str(d) ' (unitless)'])      disp(['  FAR    is ' num2str(FARang,2)    ' deg' ' = ' num2str(FARang*1.75,2)    ' D; distance = ' num2str(1524) ' mm'])      disp(['  LED 8  is ' num2str(LEDang(8),2) ' deg' ' = ' num2str(LEDang(8)*1.75,2) ' D; distance = ' num2str(round(LEDdist(8))) ' mm'])      disp(['  LED 7  is ' num2str(LEDang(7),2) ' deg' ' = ' num2str(LEDang(7)*1.75,2) ' D; distance = ' num2str(round(LEDdist(7))) ' mm'])      disp(['  LED 6  is ' num2str(LEDang(6),2) ' deg' ' = ' num2str(LEDang(6)*1.75,2) ' D; distance = ' num2str(round(LEDdist(6))) ' mm'])      disp(['  LED 5  is ' num2str(LEDang(5),2) ' deg' ' = ' num2str(LEDang(5)*1.75,2) ' D; distance = ' num2str(round(LEDdist(5))) ' mm'])      disp(['  LED 4  is ' num2str(LEDang(4),3) ' deg' ' = ' num2str(LEDang(4)*1.75,2) ' D; distance = ' num2str(round(LEDdist(4))) ' mm'])      disp(['  LED 3  is ' num2str(LEDang(3),3) ' deg' ' = ' num2str(LEDang(3)*1.75,2) ' D; distance = ' num2str(round(LEDdist(3))) ' mm'])      disp(['  LED 2  is ' num2str(LEDang(2),3) ' deg' ' = ' num2str(LEDang(2)*1.75,2) ' D; distance = ' num2str(round(LEDdist(2))) ' mm'])      disp(['  LED 1  is ' num2str(LEDang(1),3) ' deg' ' = ' num2str(round(LEDang(1)*1.75)) ' D; distance = ' num2str(round(LEDdist(1))) ' mm'])      %% you could have done the above 8 lines as a 'for' loop, Lou!      % disp(['  Distance to LED 1 (' num2str(cnv1) ' D) is ' num2str(round(d1)) ' mm'])     % disp(['  Distance to LED 2 (' num2str(LEDang(2)*1.75,2) ' D) is ' num2str(round(LEDdist(2))) ' mm'])     % disp(['  Distance to LED 3 (' num2str(LEDang(3)*1.75,2) ' D) is ' num2str(round(LEDdist(3))) ' mm'])     % disp(['  Distance to LED 4 (' num2str(LEDang(4)*1.75,2) ' D) is ' num2str(round(LEDdist(4))) ' mm'])     % disp(['  Distance to LED 5 (' num2str(LEDang(5)*1.75,2) ' D) is ' num2str(round(LEDdist(5))) ' mm'])     % disp(['  Distance to LED 6 (' num2str(LEDang(6)*1.75,2) ' D) is ' num2str(round(LEDdist(6))) ' mm'])     % disp(['  Distance to LED 7 (' num2str(LEDang(7)*1.75,2) ' D) is ' num2str(round(LEDdist(7))) ' mm'])     % disp(['  Distance to LED 8 (' num2str(LEDang(8)*1.75,2) ' D) is ' num2str(round(LEDdist(8))) ' mm'])     % disp(['  Distance to FAR (' num2str(FARang*1.75,2) ' D) is ' num2str(1524) ' mm'])      return   end   out1 = d;   out2 = d1;end