function [out1, out2, out3, out4, out5, out6] = fixmap(posdata, sampFreq)comp = computer;vers = version;if vers(1) >= '6'    degstr = '\circ';    pmstr  = '\pm';else    if comp(1) == 'M'        degstr = '¡';        pmstr = '±';    else        degstr = ' deg';        dpmtr = '+/-';    endend% determine the background color for new figstempfig = figure('visible','off');bg_color = get(tempfig,'color');close(tempfig)if bg_color(1) >= 0.5    le_color = 'g';    re_color = 'b';else    le_color = 'y';    re_color = 'c';end% default settingsposLim = 0.5;velLim = 4.0;% hardwired settings for expanded functions.  these overide any passed in.% from here onward, all our case-specific variables have been settotalDur  = length(posdata)/sampFreq;        % in millisecondsposLimPtsHor = find( abs(posdata) <= posLim );  % all points in foveal extentvelLimPtsHor = find( abs(velArray) <= velLim );  % all points that are < slip vel% intersection of these criteria gives all points% that fall within the foveation window.posVelPts = find( (abs(velArray) <= velLim) & (abs(posdata) <= posLim) );funct='showv';if strcmp(funct,'showpv') || strcmp(funct,'showvp')    fovlistHor = posVelPtsHor;    fovlistVrt = posVelPtsVrt;elseif strcmp(funct,'showp')    fovlistHor = posLimPtsHor;    fovlistVrt = posLimPtsVrt;elseif strcmp(funct,'showv')    fovlistHor = velLimPtsHor;    fovlistVrt = velLimPtsVrt;else    fovlistHor = posVelPtsHor; % NAFX calc MUST satisfy P & V!!!!!    fovlistVrt = posVelPtsVrt; % NAFX calc MUST satisfy P & V!!!!!endif isempty(fovlistHor)    disp('No horizontal foveation points detected.')    returnend    if isempty(fovlistVrt)    disp('No vertical foveation points detected.')    returnend[numfix,fixpts]=detectfix(fff,posdata,0,'s','n');t = maket(posdata);if size(fixpts) <= 1    disp( 'Need more foveation points for analysis to be valid.')    yorn=input('Show anyway (y/n)?  (You have been warned!)','s');    if ~strcmpi(yorn,'y')        return    endendkeyboardreturnFWposArray = stripnan(posArray(fovWinPts));FWvelArray = stripnan(velArray(fovWinPts));fovSize   = length(fovWinPts);            % number of good pointsfovDur    = 1000*fovSize/sampFreq;        % in millisecondsfovPerSec = fovDur/totalDur;              % avg ms of fov per secondif ~strcmp(funct(1:3), 'sho')    if isempty(inp4)        disp('Enter or calculate the number of foveations.')        return    end    fovPerCyc = fovDur/inp4;               % avg ms of fov per cycleend                                       % inp4 = # of foveations% %% %                Foveation display section                               %% %% % if all we want to do is see what points satisfy our% % pos/vel limits then plot them and return% if strcmp(funct(1:3), 'sho')  % showp, showv showpv%     % initialize the over-plotting arrays%     pLimArray = NaN*ones(length(posArray),1);%     vLimArray = NaN*ones(length(velArray),1);%     %     if strcmp(funct,'showpv') | strcmp(funct,'showvp')%         % then fill them with only the appropriate pts%         pLimArray(posVelPts) = posArray(posVelPts);%         vLimArray(posVelPts) = velArray(posVelPts);%         t1 = ([upper(nameclean(what_f_array)) dataseg ': Vel. points within '...%             pmstr num2str(posLim) degstr ' by ' num2str(velLim) degstr '/sec window']);%         t2 = ([upper(nameclean(what_f_array)) dataseg ': Pos. points within '...%             pmstr num2str(posLim) degstr ' by ' num2str(velLim) degstr '/sec window']);%         t3 = ([upper(nameclean(what_f_array)) dataseg '  ' num2str(totalDur) ' sec:  ' ...%             num2str(numfov) ' Foveations identified within '...%             pmstr num2str(posLim) degstr ' by ' num2str(velLim)  degstr '/sec window']);%         %     elseif strcmp(funct,'showp')%         pLimArray(posLimPts) = posArray(posLimPts);%         vLimArray(posLimPts) = velArray(posLimPts);%         t1 = ([ upper(nameclean(what_f_array)) dataseg ': Vel. points within '...%             'position limit of ' pmstr num2str(posLim) degstr]);%         t2 = ([ upper(nameclean(what_f_array)) dataseg ': Pos. points within '...%             'position limit of ' pmstr num2str(posLim) degstr]);%         t3 = ([upper(nameclean(what_f_array)) dataseg ':  ' num2str(numfov) ' '...%             ' Foveations identified within '...%             'the ' pmstr num2str(posLim) degstr ' limit']);%         %     elseif strcmp(funct,'showv')%         pLimArray(velLimPts) = posArray(velLimPts);%         vLimArray(velLimPts) = velArray(velLimPts);%         t1 = ([upper(nameclean(what_f_array)) dataseg ...%             ': Vel. points within velocity limit of ' pmstr num2str(velLim) degstr ]);%         t2 = ([upper(nameclean(what_f_array)) dataseg ...%             ': Pos. points within velocity limit of ' pmstr num2str(velLim) degstr ]);%         t3 = ([upper(nameclean(what_f_array)) dataseg ':  ' num2str(numfov) ' '...%             ' Foveations identified within '...%             'the ' pmstr num2str(velLim) degstr '/sec limit']);%     end%     %     % 1st figure: show the raw points that satisfy both pos and vel limits%     % plotted on top of the separate pos and velocity traces.%     if NAFshowOutput%         if dblPlot==3%             % skip the first plot%         else%             if dblPlot==1%                 pv=figure;%                 subplot(2,1,1); box on%             elseif dblPlot==2%                 v=figure;%             end%             hold on%             p1 = plot(t,velArray, pColorStr); box on%             p2 = plot(t,vLimArray,'m'); box on%             set(p2,'LineWidth',2);%             set(p2,'LineStyle','-');%             set(p2,'Marker','*');%             set(p2,'MarkerSize',2);%             set(p2,'MarkerEdgeColor','r');%             title(t1)%             drawrad(0,velLim);%             set(gca,'XLim',[t(1), t(end)]);%             if dblPlot==1%                 subplot(2,1,2); box on%             elseif dblPlot==2%                 p=figure;%             end%             set(gca,'XLim',[t(1), t(end)]);%             hold on%             p1 = plot(t,posArray, pColorStr); box on%             p2 = plot(t,pLimArray,'m'); box on%             set(p2,'LineWidth',2);%             set(p2,'LineStyle','-');%             set(p2,'Marker','*');%             set(p2,'MarkerSize',2);%             set(p2,'MarkerEdgeColor','r');%             title(t2)%             drawrad(0,posLim);%             set(gca,'XLim',[t(1), t(end)]);%             %             if dblPlot==1 %together%                 figure(pv);%                 subplot(2,1,1);ylabel(['Eye Velocity (' degstr '/sec)']);%                 subplot(2,1,2);xlabel('Time (sec)');%                 ylabel(['Eye Position (' degstr ')']);%             elseif dblPlot==2%                 figure(v);xlabel('Time (sec)');%                 ylabel(['Eye Velocity (' degstr '/sec)']);%                 figure(p);xlabel('Time (sec)');%                 ylabel(['Eye Position (' degstr ')']);%             end%         end%         %         disp(['Total time: ' num2str(length(posArray)/sampFreq) ' sec. (' ...%             num2str(length(posArray)) ' samples)' ])%         disp(['Total time that meets position criterion = '...%             num2str(1000/sampFreq*length(posLimPts)) ' msec.' ...%             '    (' num2str(length(posLimPts)) ' samples) '] )%         disp(['Total time that meets velocity criterion = '...%             num2str(1000/sampFreq*length(velLimPts)) ' msec.' ...%             '    (' num2str(length(velLimPts)) ' samples) '] )%         disp(['Total time that meets both criteria      = '...%             num2str(1000/sampFreq*length(fovlist)) ' msec.' ...%             '    (' num2str(length(fovlist)) ' samples) [raw] '] )%         disp(['Total time that meets both criteria      = '...%             num2str(1000/sampFreq*length(fovWinPts)) ' msec.' ...%             '    (' num2str(length(fovWinPts)) ' samples) '] )%         disp(['There were (probably) ' num2str(numfov)...%             ' foveation periods in this interval.'])%         disp('Cycles by manual count: ')%         disp(' ')%     end %if NAFshowOutput%     %     % second figure%     % guess how many foveation periods and overplot them on the pos/vel data%     pLimArray = NaN*ones(length(posArray),1);%     pLimArray(fovWinPts) = posArray(fovWinPts);%     %vLimArray = NaN*ones(length(velArray),1);%     %vLimArray(fovWinPts) = velArray(fovWinPts);%     if NAFshowOutput%         fovWinfig=figure;%         hold on%         p1 = plot(t,posArray, pColorStr); box on%         p2 = plot(t,pLimArray,'m'); box on%         set(p2,'LineWidth',2);%         set(p2,'LineStyle','-');%         set(p2,'Marker','*');%         set(p2,'MarkerSize',2);%         set(p2,'MarkerEdgeColor','r');%         set(gca,'XLim',[t(1), t(end)]);%         drawrad(0,posLim);%         ept%         title(t3)%     end %if NAFshowOutput%     %     %     % set our output variables%     out1 = posLimPts;%     out2 = velLimPts;%     out3 = posVelPts;%     out4 = numfov;%     out5 = fovWinPts;%     %     return% end% % %% %                     NAFX calculation section                           %% %% % start calculations for common NAF/NFX functions% STDpos = std(FWposArray);% STDvel = std(FWvelArray);% % % for NAF% normfac = 0.5/posLim;            % normalized to standard% posfac  = (posLim/velLim);       % limits% %posfac  = (posLim/velLim)^2;% % VARpos = STDpos^2;% VARvel = STDvel^2;% pooledVar = 0.5*( (STDpos)^2 + (STDvel*(posLim/velLim))^2 );% pooledSTD = sqrt(pooledVar);% % % check to see if enough foveation for realistic results% if fovPerSec <= 2000/sampFreq%     disp('Insufficient foveation time for reasonable analysis.')%     yn=lower(input('Be unreasonable and override anyway (y/n)? ','s'));%     if yn~='y'%         fovFlag = 0;%         return%     end% end% % NAFXval  = (1-(pooledSTD*normfac)) * (1 - exp(-fovPerCyc/tau));% NAFPval =   (1-(STDpos*normfac))  * (1 - exp(-fovPerCyc/tau));% % if strcmp(mode,'gui')%     set(tauNAFXH,'string',num2str(tau));% end% % age_range_str={'under 6 years old'; '6 to 12 years old'; '12+ to 40 years old'; ...%     '40+ to 60 years old'; '60+ years old'; 'canine (any age)'};% % % if (NAFshowOutput)      % add a condition for suppression of printout.%     disp(['results: (using NAFX vers. ' NAFXvers ', DetectFovs vers. ' DFvers ')'])%     if strcmpi(funct(1:3),'naf')%         snel = va2nafx(2,NAFXval,age_range,1);%         if isnan(snel), snel = '20/1,250,000';end%         disp(['                     NAFX = ' num2str(NAFXval,3) '  (<= ' snel ')  --  ' ...%             age_range_str{age_range}])%         %disp(['NAF(X) (for position only) = ' num2str(NAFPval)])%         disp(['Fov. time per fov. period = ' num2str(fovPerCyc,3) ' msec'])%         disp(['     Fov. time per second = ' num2str(fovPerSec/1000,3) ' sec'])%         disp(['            STD(pos, vel) = (' num2str(STDpos,3) ' deg, ' ...%             num2str(STDvel,3) ' deg/sec)'])%         disp(['    Fov. window (pos, vel): (' num2str(posLim) ' deg, ' ...%             num2str(velLim) ' deg/sec)'])%         disp(['                       tau: ' num2str(tau,3) ' msec'])%         disp('')%     end% end% % % set our output variables% assignin('base','NAFXval', NAFXval)% out1 = NAFXval;% out2 = NAFPval;% out3 = fovPerCyc;% out4 = fovPerSec;% out5 = STDpos;% out6 = STDvel;% return%%%%%%%%% nameclean.m: allow underscores and carets to print as is, rather than% interpreting them as sub- and superscripts.% usage: out = nameclean(in)% Written by:  Jonathan Jacobs%              July 2002  (last mod: 07/25/02)function out = nameclean(in)if ~isempty(in)    out = strrep(in,'_','\_');    out = strrep(out,'^','\^');    out = strrep(out,'''','');else    out = '';end