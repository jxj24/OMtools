function tplot3( input_1, input_2, input_3 )% tplot3( pos, vel, acc )% Interactive look at position, velocity and acceleration of the eye% at times before (and after, if you want) onset of saccades.% Results are shown in a phase plane.% Works only for data that has had saccade control points defined.% <<<requires "update3.m" and "tButt3.m">>>% written by Jonathan Jacobs & Peggy Skelly%            September 1995 - April 1996  (last mod: 04/08/96)global sacv_on_mat samp_freq filenameglobal pts offsetglobal sd_1 sd_2 sd_3 avg_1 avg_2 avg_3global sli_azm sli_elv azm_cur elv_curglobal elv azm fig hBox hOffset hExportglobal list_1 list_2 list_3 refSign exportglobal hXHigh hXLow hYHigh hYLow hZHigh hZLowglobal hXLock hYLock hZLock% sanity testingif ~exist( 'sacv_on_mat' )   disp( 'You need to run "pickdata" first.' )   returnendif isempty(input_1) | isempty(input_2) | isempty(input_3)   disp( 'TPLOT3 requires three equally-sized arguments.' )   returnend% initialize sd_x, avg_xsd_1  = NaN*ones(50,1);sd_2  = NaN*ones(50,1);sd_3  = NaN*ones(50,1);avg_1 = NaN*ones(50,1);avg_2 = NaN*ones(50,1);avg_3 = NaN*ones(50,1);temp_1 = []; temp_2 = []; temp_3 = [];% define pts from sacv_on_mat (don't want to fall off the beginning...)[nRows nCols] = size(sacv_on_mat);for q = 1:nCols   num_pts = length( find(sacv_on_mat(:,q) < 100000) );   if sacv_on_mat(1, q) < 50         % ~100ms at 488Hz, ~125ms at 400Hz      pts(1:num_pts-1, q) = sacv_on_mat(2:num_pts, q);      pts(num_pts:nRows, q) = NaN*ones(nRows-num_pts+1,1); % pad w/NaNs   else      pts(:,q) = sacv_on_mat(:, q);  % don't need to adjust list   endend% initialize the offset (sample points of first phase plot)offset = fix(samp_freq*40/1000);  % ~40msec before the saccadeentry  = offset + 20;             % so we can look at times BEFORE saccades% when we calc SD and average.figure('Name', 'Mr. Peabody''s Way-back Machine','NumberTitle','off');%orient landscape;fig = gcf;set( fig, 'UserData', [input_1, input_2, input_3] );axes( 'pos', [ .125 .28 .85 .64])   % so graph doesn't bonk into GUI% do initial calculationsfor x=1:nCols                               % put all the data into 1 col...   num_pts(x) = length(find(pts(:,x) <100000));       %exclude padding NaNs   pt_col = pts(1:num_pts(x),x);   temp_1 = [temp_1' input_1(pt_col-offset,x)']';  %the ith column of data   temp_2 = [temp_2' input_2(pt_col-offset,x)']';  %is indexed by the ith   temp_3 = [temp_3' input_3(pt_col-offset,x)']';  %col of the saccade listend% It's important to check that we haven't gone back into the previous% foveating saccade. The best way to do this is to look at the velocity:% first look at the velocity of some points at (let's say) ~10ms before% the saccade. This is our reference sign.  (We'll look at the last column.)refList = sign(input_2(pt_col-4, nCols));numPos  = length(find(refList>0));numNeg  = length(find(refList<0));allSame = all(refList);if allSame,   refSign = refList(1);else   disp( '<< tplot3: possible refList problem!>>')   returnend% Now when we look at times further in  the past we will check to% see if the sign of any of these saccade-offset signs has flipped.% If so, then we must exclude those points.%goodPts = find( (sign(temp_2) == refSign) | (sign(temp_2) == 0) );%list_1 = temp_1(goodPts);%list_2 = temp_2(goodPts);%list_3 = temp_3(goodPts);list_1 = temp_1;list_2 = temp_2;list_3 = temp_3;% let's take a guess at what sort of data we are dealing with,% velocity or acceleration.  Make an assumption that max velocity% will never exceed 500 deg/sec.  The result will be used to set% axis limits and labels.% first the x axis stuff...data_max_1 = max(list_1);data_min_1 = min(list_1);if data_max_1 == 0; data_max_1 =  1; endif data_min_1 == 0; data_max_1 = -1; endx_ax_lims = [ data_min_1 - abs(data_min_1*0.125),...   data_max_1 + abs(data_min_1*0.125) ];if max(abs(list_1)) > 500                      % most likely accel   x_labl  = 'acceleration (deg/sec^2)';elseif max(abs(list_1)) > 50                  % must be velocity   x_labl  = 'velocity (deg/sec)';else                                          % position, I guess...   x_labl  = 'position (deg)';end% ...then the y axis stuffdata_max_2 = max(list_2);data_min_2 = min(list_2);if data_max_2 == 0; data_max_2 =  1; endif data_min_2 == 0; data_min_2 = -1; endy_ax_lims = [ data_min_2 - abs(data_min_2*0.125),...   data_max_2 + abs(data_max_2*0.125) ];y_labl  = 'acceleration (deg/sec^2)';if max(abs(list_2)) > 500                      % most likely accel   y_ax_lims = [ data_min_2 data_max_2 ];elseif max(abs(list_2)) > 50                  % must be velocity   y_labl  = 'velocity (deg/sec)';else                                          % position, I guess...   y_labl  = 'position (deg)';end% ...and finally the z axis stuffdata_max_3 = max(list_3);data_min_3 = min(list_3);if data_max_3 == 0; data_max_3 =  1; endif data_min_3 == 0; data_min_3 = -1; endz_ax_lims = [ data_min_3 - abs(data_min_3*0.125),...   data_max_3 + abs(data_min_3*0.125) ];if max(abs(list_3)) > 500                      % most likely accel   z_labl  = 'acceleration (deg/sec^2)';elseif max(abs(list_3)) > 50                  % must be velocity   z_labl  = 'velocity (deg/sec)';else                                          % position, I guess...   z_labl  = 'position (deg)';endavg_1(entry) = mean(list_1);avg_2(entry) = mean(list_2);avg_3(entry) = mean(list_3);sd_1(entry)  = std(list_1);sd_2(entry)  = std(list_2);sd_3(entry)  = std(list_3);sd_str=[ '-- SD(x,y,z): (' num2str( sd_1(entry) ) ',' ,...   num2str( sd_2(entry) ) ',' ,...   num2str( sd_3(entry) ) ')'];avg_str=[ '-- Avg(x,y,z): (' num2str( avg_1(entry) ) ',' ,...   num2str( avg_2(entry) ) ',' ,...   num2str( avg_3(entry) ) ')'];% do initial plotplot3( list_1, list_2, list_3, 'c.',...   avg_1(entry), avg_2(entry), avg_3(entry), 'y+')azm = -37;elv = 30;% get handles to the lines and put them into the axis userdata property% kids(1) = the centroid                  => 1st userdata element% kids(2) = the first set of (x,y,z) data => 2nd userdata elementkids = get( gca, 'Children' );set( gca, 'UserData', [ kids(1); kids(2) ] );% set axes and labelsxlabel( x_labl );ylabel( y_labl );zlabel( z_labl );when = num2str(1000/samp_freq * offset);sacnum = [num2str(length(list_1)) ' saccades'];title( [sacnum '   -'  when  ' ms ' avg_str] )%title( [sacnum '   '  when  ' msec before saccade ' sd_str] )set( gca, 'XLim', x_ax_lims, 'YLim', y_ax_lims, 'ZLim', z_ax_lims  );%*********************************************************************% do all the ui setup.  a bit messy looking, but quite simple, really.% set up our amazing time machine% move one time step further from the saccadehBack = uicontrol( 'Style','Pushbutton','Units','normal',...   'Position',[0.09 0.0 0.065 0.05],...   'String','Back','UserData',gca,...   'Callback',[ 'tButt3(''Back'');' ]);% move one time step closer to the saccadehForward = uicontrol( 'Style','Pushbutton','Units','normal',...   'Position',[0.155 0.0 0.065 0.05],...   'String','Fwd','UserData',gca,...   'Callback',[ 'tButt3(''Fwd'');' ]);% enter a time offset from the keyboardhOffset = uicontrol( 'Style','edit','Units','normal',...   'ForeGroundColor', 'white',...   'BackGroundColor', 'magenta',...   'Position',[0.01 0.0 0.075 0.05],...   'String',num2str(offset/samp_freq*1000),'UserData',gca,...   'Callback',[ 'tButt3(''hOffset'')' ]);% 'trajectory' check box.  initially turned offhBox = uicontrol('Style','CheckBox','Units','normal',...   'ForeGroundColor','black',...   'Position',[0.235 0.0 0.11 0.05],...   'String','trails',...   'Value', 0 );% clear all but the latest (x,y,z) data and its asociated centroidhClear = uicontrol( 'Style','Pushbutton','Units','normal',...   'Position',[0.35 0.0 0.075 0.05],...   'String','Clear','UserData',gca,...   'Callback',[ 'kids = get(gca, ''Children'');',...   'for i=1:length(kids)',...   'if( kids(i) ~= get(gca, ''UserData'') ),',...   'delete( kids(i) );',...   'end,',...   'end'                        ]);hQuit = uicontrol( 'Style','Pushbutton','Units','normal',...   'Position',[0.43 0.0 0.075 0.05],...   'String','Quit','UserData',gca,...   'Callback',['clear pts offset kids;',...   'tButt3(''Quit'');']);hExport = uicontrol( 'Style','Pushbutton','Units','normal',...   'Position',[0.51 0.0 0.08 0.05],...   'String','Export','UserData',gca,...   'Callback',['tButt3(''Export'');']);%*********************************************************************% the view buttons% view as Aceleration vs. VelocityhAvsV = uicontrol( 'Style','Pushbutton','Units','normal',...   'Position',[0.91 0.0 0.08 0.05],...   'String','(a, v)','UserData',gca,...   'Callback',[ 'tButt3( ''AvsV'');' ]);% view as Velocity vs. PositionhVvsP = uicontrol( 'Style','Pushbutton','Units','normal',...   'Position',[0.91 0.055 0.08 0.05],...   'String','(v, p)','UserData',gca,...   'Callback',[ 'tButt3( ''VvsP'');' ]);% view as Aceleration vs. Velocity vs. Positionh3D = uicontrol( 'Style','Pushbutton','Units','normal',...   'Position',[0.91 0.11 0.08 0.05],...   'String','3-D','UserData',gca,...   'Callback',[ 'tButt3( ''3D'');' ]);%*********************************************************************% azimuth and elevation stuff% create the azimuth slidersli_azm = uicontrol(fig, 'Style', 'slider', 'Units','normal',...   'Position', [ .1 .055 .4 .05],'UserData',gca,...   'Min', -90, 'Max', 90, 'Value', -37.5,...   'Callback',[ 'tButt3(''sli_azm'');' ]);% create the elevation slidersli_elv = uicontrol(fig, 'Style', 'slider',...   'Units','normal','Position', [.1 .11 .4 .05],'UserData',gca,...   'Min', -90, 'Max', 90, 'Value', 30,...   'Callback',[ 'tButt3(''sli_elv'');' ]);% create the 'azimuth' labelazm_label = uicontrol(fig, 'Style', 'text',...   'Units','normal','Pos', [.01 .055 .08 .05],...   'String', 'Azim.');% create the 'elevation' labelelv_label = uicontrol(fig, 'Style', 'text',...   'Units','normal','Pos', [.01 .11 .08 .05],...   'String', 'Elev.');% set the 'azimuth' dataazm_cur = uicontrol( fig, 'Style', 'edit',...   'Units','normal','Pos', [.51 .055 .08 .05],'UserData',gca,...   'String', num2str(get(sli_azm, 'Value')),...   'BackGroundColor','magenta','ForeGroundColor','white',...   'Callback', ['tButt3(''azm_cur'');'] );% set the 'elevation' dataelv_cur = uicontrol( fig, 'Style', 'edit',...   'Units','normal','Pos', [.51 .11 .08 .05],'UserData',gca,...   'String', num2str(get(sli_elv, 'Value')),...   'BackGroundColor','magenta','ForeGroundColor','white',...   'Callback', ['tButt3(''elv_cur'');'] );%*********************************************************************% axis limits stuffx_ax_lims = get(gca, 'XLim');y_ax_lims = get(gca, 'YLim');z_ax_lims = get(gca, 'ZLim');x_ax_low = x_ax_lims(1); x_ax_high = x_ax_lims(2);y_ax_low = y_ax_lims(1); y_ax_high = y_ax_lims(2);z_ax_low = z_ax_lims(1); z_ax_high = z_ax_lims(2);set( gca, 'XLim', x_ax_lims, 'YLim', y_ax_lims, 'ZLim', z_ax_lims );% set the X, Y, Z axis limshXLow = uicontrol( fig, 'Style', 'edit',...   'Units','normal','Pos', [.705 .11 .09 .05],...   'String', num2str(x_ax_low),...   'BackGroundColor','magenta','ForeGroundColor','white',...   'Callback', ['tButt3( ''xLow'')' ] );hXHigh = uicontrol( fig, 'Style', 'edit',...   'Units','normal','Pos', [.80 .11 .09 .05],...   'String', num2str(x_ax_high),...   'BackGroundColor','magenta','ForeGroundColor','white',...   'Callback', ['tButt3( ''xHigh'')' ] );hYLow = uicontrol( fig, 'Style', 'edit',...   'Units','normal','Pos', [.705 .055 .09 .05],...   'String', num2str(y_ax_low),...   'BackGroundColor','magenta','ForeGroundColor','white',...   'Callback', ['tButt3( ''yLow'')' ] );hYHigh = uicontrol( fig, 'Style', 'edit',...   'Units','normal','Pos', [.80 .055 .09 .05],...   'String', num2str(y_ax_high),...   'BackGroundColor','magenta','ForeGroundColor','white',...   'Callback', ['tButt3( ''yHigh'')' ] );hZLow = uicontrol( fig, 'Style', 'edit',...   'Units','normal','Pos', [.705 .0 .09 .05],...   'String', num2str(z_ax_low),...   'BackGroundColor','magenta','ForeGroundColor','white',...   'Callback', ['tButt3( ''zLow'')' ] );hZHigh = uicontrol( fig, 'Style', 'edit',...   'Units','normal','Pos', [.80 .0 .09 .05],...   'String', num2str(z_ax_high),...   'BackGroundColor','magenta','ForeGroundColor','white',...   'Callback', ['tButt3( ''zHigh'')' ] );% create the 'Lock' checkboxeshXLock = uicontrol('Style','CheckBox','Units','normal',...   'ForeGroundColor','black',...   'Position',[0.605 0.11 0.095 0.05],...   'String','lock X',...   'Value', 0 );hYLock = uicontrol('Style','CheckBox','Units','normal',...   'ForeGroundColor','black',...   'Position',[0.605 0.055 0.095 0.05],...   'String','lock Y',...   'Value', 0 );hZLock = uicontrol('Style','CheckBox','Units','normal',...   'ForeGroundColor','black',...   'Position',[0.605 0.0 0.095 0.05],...   'String','lock Z',...   'Value', 0 );