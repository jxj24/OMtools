% xyplotsettings.m: Called by 'ebAct3D' to provide window with controls% to set XY plot parameters.%% Written by: Jonathan Jacobs%             April 2003 - May 2005 (last mod: 05/11/05)% Files necessary for proper operation:%   'eyeballs3d', 'ebAct3D.m', 'datscale.m', 'd2pt.m', 'axispad.m',%   'xyplotsettings.m', 'ebdatacheck.m', 'ebdataload.m'% 02 Feb 05: added extra cells to wf_axXY 'UserData' field as placeholders%            for the phase plane data arrays to enable stepping through%            the data ONLY AFTER it has been played at least once.% 09 May 05: zillions of little fixes.  added settings for fovea/fov window size.%            'lock'/'free' now properly implemented to prevent constant overwriting%            of user-set titles, x- & y-labels. %            x-, y-limits calculated automatically% 20 Aug 05: Added calculation of axis limits.  %            Added automatic recalculation of titles/labels when changing data%            sources.%            (pending) User control over color of foveation limits linefunction xyplotsettings(xy_button)global rh lh rv lv rt lt st sv samp_freqpersistent xlowtemp xhightemp ylowtemp yhightemp% look for the open windowsefig = -1; cfig = -1; wfig = -1; sfig = -1; xyfig = -1;wl = get(0,'Children');for i = 1:length(wl)   if strcmp(get(wl(i),'Name'),'Waveform Monitor'),    wfig=wl(i);  end   if strcmp(get(wl(i),'Name'),'Eye Monitor Control'), cfig=wl(i);  end   if strcmp(get(wl(i),'Name'),'XY Plot settings'),    xyfig=wl(i); endendORANGE = [1 0.5 0]; DKORANGE = [1.0 0.25 0.0];LTGRAY = [0.75 0.75 0.75]; DKGRAY = [0.5 0.5 0.5]; MEDGRAY = [0.66 0.66 0.66];comp = computer;vers = version;if vers(1) >= '6'   degstr = '\circ';   pmstr  = '\pm'; else   if comp(1) == 'M'     degstr = '¡';     pmstr = '±';   else     degstr = ' deg';     dpmtr = '+/-';   endend cfig_ht = 400;cfigpos = get(cfig,'Pos');cfigxctr = cfigpos(1)+cfigpos(3)/2;cfigyctr = cfigpos(2)+cfigpos(4)/2;xyfigpos = [cfigxctr-150 cfigyctr-cfig_ht/2 300 cfig_ht];wf_userD = get(wfig,'UserData');wH = wf_userD{2};wf_axXY = wH(13);temp = get(wf_axXY,'UserData');% 'availchan' based on data loaded in memory% assumption that empty right<->empty left (see eyeballs3d setup)h_str=''; v_str=''; t_str='';if ~all(rh==0), h_str='rh|lh|'; endif ~all(rv==0), v_str='rv|lv|'; endif ~all(rt==0), t_str='rt|lt|'; endavailchan = [h_str v_str t_str ];% set the color/style/symbol popup menu stringcolorlist = 'red|yellow|green|blue|cyan|magenta|white|black';stylelist = 'solid|dashed|dotted|dash-dot';symbolist = 'circle|square|triangle|x|star|diamond|hexagram';ypos = cfig_ht; xorig = 10;if strcmp(xy_button,'initialize')   %%% if the XY plot axis (wf_axXY) already has values loaded    %%% use them to set the control values in the XY setting window.   %%% otherwise, start w/default values for XY setting window.	temp=get(wf_axXY, 'Userdata');   if iscell(temp{1}), xy_val=temp{1}; else xy_val=[]; end   % use these default values when initializing the 'xyplotsettings' window   if isempty(xy_val)		xy_val{1}  = '';     xy_val{2}  = 1;       %% windowtitle,  xdata1		xy_val{3}  = 0;      xy_val{4}  = 0;       %% xdata1vel,    xdata1acc		xy_val{5}  = '';     xy_val{6}  = '';      %% xdata1label,  xdata1other		xy_val{7}  = 2;      xy_val{8}  = 0;       %% ydata1,       ydata1vel		xy_val{9}  = 0;      xy_val{10} = '';      %% ydata1acc,    ydata1label		xy_val{11} = '';     xy_val{12} = [];      %% ydata1other,  xlowlim		xy_val{13} = [];     xy_val{14} = [];      %% xhighlim,     ylowlim		xy_val{15} = [];     xy_val{16} = 3;       %% yhighlim,     line1color		xy_val{17} = 1;      xy_val{18} = 4;       %% line1style,   head1color		xy_val{19} = 1;      xy_val{20} = '0.50';  %% head1symbol,  history		xy_val{21} = '0.5';  xy_val{22} = '0.5';   %% fplimh, 		fplimv 		xy_val{23} = '4.0';  xy_val{24} = 1;       %% fvlim         samp_or_sec 		xy_val{25} = 'free';	xy_val{26} = 'free';  %% wt_locked     xl_locked 		xy_val{27} = 'free';								 %% yl_locked 		xy_val{28} = '';		     						 %% x_dat_str 		xy_val{29} = '';    								 %% y_dat_str  end   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	%%%%%%                 set up the controls                %%%%%%	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   if xyfig>0      figure(xyfig)      xywind = xyfig;    else		xywind = figure('Position',xyfigpos, ...			'Name',['XY Plot settings'],'NumberTitle','off', ...			'Resize','off','Menubar','none','Tag','Editing: XY setting',...			'color',[0.0 0.0 0.0] );	end			ypos = ypos - 30;	uicontrol(xywind, 'Style','Frame','Units','Pixels',...		'BackgroundColor',[0.25 0.25 0.25],'Position',[5 ypos-8 290 36])	uicontrol(xywind, 'Style','Frame','Units','Pixels',...		'BackgroundColor',[0.25 0.25 0.25],'Position',[5 ypos-125 290 110])	uicontrol(xywind, 'Style','Frame','Units','Pixels',...		'BackgroundColor',[0.25 0.25 0.25],'Position',[5 ypos-243 290 115])	uicontrol(xywind, 'Style','Frame','Units','Pixels',...		'BackgroundColor',[0.25 0.25 0.25],'Position',[5 ypos-332 290 85])		uicontrol(xywind, 'Style', 'text',...		'Position', [xorig ypos 45 20], 'String', 'Title:');		windowtitleH = uicontrol('Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xorig+50 ypos 230 20],'String',xy_val{1},...		 'Tag',xy_val{25},...		 'Tooltip','Set automatically, unless you manually enter text',...		 'Callback',['if(isempty(get(gco,''string''))),'...		                 'set(gco,''Tag'',''free'');'...		               'else set(gco,''Tag'',''locked''); end']);		  % use 'locked/unlocked' tag entry to help determine if text in the		  % field was set manually (by the user == 'locked') or automatically		  % (by the title calculation code == 'unlocked').          % Clearing the text field will unlock it.		  % 'Locked' shouldn't get overwritten by a new calculation, but 'unlocked'		  % is fair game. This rule applies to the X and Y label text, too.		% set up the X data controls	ypos = ypos - 40;	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig ypos 45 20], 'String', 'X Data');	xdata1H = uicontrol('Style','popup','Units','pixels',...		'Position',[xorig+50 ypos 75 20],...		'String',availchan,...		'Tooltip','Select the X data for XY plot 1',...		'HorizontalAlignment', 'center', 'Value', xy_val{2},... 	   'UserData',xy_val{2}, 'Tag','',...		'Callback',['xyplotsettings(''datachange'')']);		xdata1velH = uicontrol(xywind, 'Style', 'Checkbox',...		'Position', [xorig+130 ypos 45 20],'UserData',0,...		'Value', xy_val{3}, 'Tooltip','Make Xdata1 a velocity',...	   'UserData',xy_val{3}, 'Tag','',...		'String', 'Vel.', 'Callback', ['xyplotsettings(''datachange'')'] );		xdata1accH = uicontrol(xywind, 'Style', 'Checkbox',...		'Position', [xorig+180 ypos 45 20],'UserData',0,...		'Value', xy_val{4}, 'Tooltip','Make Xdata1 an acceleration',...	   'UserData',xy_val{4}, 'Tag','',...		'String', 'Acc.', 'Callback', ['xyplotsettings(''datachange'')'] );	xdata1otherH = uicontrol('Style','pushbutton','Units','pixels',...	   'Position',[xorig+230 ypos 50 20],'String','Other...',...	   'Tooltip','Select X data from base workspace.',...	   'HorizontalAlignment', 'center',... 	   'UserData','', 'Tag','',...	   'Callback',['xyplotsettings(''x_other'')']);	ypos = ypos - 25;   		uicontrol(xywind, 'Style', 'text',...		'Position', [xorig ypos 45 20], 'String', 'X Label');	xdata1labelH = uicontrol('Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xorig+50 ypos 230 20],'String', xy_val{5},...		 'Tooltip','Set automatically, unless you manually enter text',...		 'Tag', xy_val{26},...		 'Callback',['if(isempty(get(gco,''string''))),'...		                 'set(gco,''Tag'',''free'');'...		               'else set(gco,''Tag'',''locked''); end']);		  % see note following windowtitleH.				% set up the Y data controls	ypos = ypos - 30;	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig ypos 45 20], 'String', 'Y Data');	ydata1H = uicontrol('Style','popup','Units','pixels',...		'Position',[xorig+50 ypos 75 20],...		'String',availchan,...		'Tooltip','Select the Y data for XY plot 1',...		'HorizontalAlignment', 'center', 'Value', xy_val{7},... 	   'UserData',xy_val{7}, 'Tag','',...		'Callback',['xyplotsettings(''datachange'')']);		ydata1velH = uicontrol(xywind, 'Style', 'Checkbox',...		'Position', [xorig+130 ypos 45 20],'UserData',0,...		'Value', xy_val{8}, 'Tooltip','Make Ydata1 a velocity',...	   'UserData',xy_val{8}, 'Tag','',...		'String', 'Vel.', 'Callback', ['xyplotsettings(''datachange'')'] );			ydata1accH = uicontrol(xywind, 'Style', 'Checkbox',...		'Position', [xorig+180 ypos 45 20],'UserData',0,...		'Value', xy_val{9}, 'Tooltip','Make Ydata1 an acceleration',...	   'UserData',xy_val{9}, 'Tag','',...		'String', 'Acc.', 'Callback', ['xyplotsettings(''datachange'')'] );	ydata1otherH = uicontrol('Style','pushbutton','Units','pixels',...	   'Position',[xorig+230 ypos 50 20],'String','Other...',...	   'Tooltip','Select Y data from base workspace.',...	   'HorizontalAlignment', 'center',...	   'UserData','', 'Tag','',...	   'Callback',['xyplotsettings(''y_other'')']);	ypos = ypos - 25;   	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig ypos 45 20], 'String', 'Y Label');	ydata1labelH = uicontrol('Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xorig+50 ypos 230 20],'String', xy_val{10},...		 'Tooltip','Set automatically, unless you manually enter text',...		 'Tag', xy_val{27},...		 'Callback',['if(isempty(get(gco,''string''))),'...		                 'set(gco,''Tag'',''free'');'...		               'else set(gco,''Tag'',''locked''); end']);		  % see note following windowtitleH.	% axis limit controls	ypos = ypos - 34;   	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig ypos 120 20], 'String', 'Foveation Pos Lims');	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig+125 ypos 30 20], 'String', 'Hor');	fplimhH = uicontrol('Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xorig+155 ypos 40 20],'String', xy_val{21},...		 'Tooltip','',...		 'Callback',['']);	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig+205 ypos 30 20], 'String', 'Vrt');	fplimvH = uicontrol('Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xorig+235 ypos 40 20],'String', xy_val{22},...		 'Tooltip','',...		 'Callback',['']);		 	ypos = ypos - 25;   	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig ypos 120 20], 'String', 'Foveation Vel Lim');	fvlimH = uicontrol('Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xorig+125 ypos 40 20],'String', xy_val{23},...		 'Tooltip','',...		 'Callback',['']);	ypos = ypos - 30;   	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig ypos 65 20], 'String', 'X-axis limits');	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig+70 ypos 27 20], 'String', 'low');	xloH = uicontrol('Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xorig+100 ypos 40 20],'String', xy_val{12},...		 'Tooltip','Calculated automatically, unless you manually enter limit',...		 'Callback',['if(isempty(get(gco,''string''))),'...		                 'set(gco,''Tag'',''free'');'...		               'else set(gco,''Tag'',''locked''); end']);		  % see note following windowtitleH.	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig+145 ypos 27 20], 'String', 'high');	xhiH = uicontrol('Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xorig+175 ypos 40 20],'String', xy_val{13},...		 'Tooltip','Calculated automatically, unless you manually enter limit',...		 'Callback',['if(isempty(get(gco,''string''))),'...		                 'set(gco,''Tag'',''free'');'...		               'else set(gco,''Tag'',''locked''); end']);		  % see note following windowtitleH.	ypos = ypos - 26;   	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig ypos 65 20], 'String', 'Y-axis limits');	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig+70 ypos 27 20], 'String', 'low');	yloH = uicontrol('Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xorig+100 ypos 40 20],'String', xy_val{14},...		 'Tooltip','Calculated automatically, unless you manually enter limit',...		 'Callback',['if(isempty(get(gco,''string''))),'...		                 'set(gco,''Tag'',''free'');'...		               'else set(gco,''Tag'',''locked''); end']);		  % see note following windowtitleH.	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig+145 ypos 27 20], 'String', 'high');	yhiH = uicontrol('Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xorig+175 ypos 40 20],'String', xy_val{15},...		 'Tooltip','Calculated automatically, unless you manually enter limit',...		 'Callback',['if(isempty(get(gco,''string''))),'...		                 'set(gco,''Tag'',''free'');'...		               'else set(gco,''Tag'',''locked''); end']);		  % see note following windowtitleH.	autocalcH = uicontrol('Style','pushbutton','Units','pixels',...		'Position',[xorig+220 ypos+6 40 30],...		'String', ['Calc'],...		'Tooltip','Calculate best axis fit for data',...		'UserData',[xhiH xloH yhiH yloH],...		'Callback',['xyplotsettings(''calclims'');']);	% line details (color, style, history)	ypos = ypos - 35;	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig ypos 55 20], 'String', 'Line Color');	line1colorH = uicontrol('Style','popup','Units','pixels',...		'Position',[xorig+60 ypos 75 20],...		'String',colorlist,...		'Tooltip','Select the color for line 1',...		'HorizontalAlignment', 'center', 'Value', xy_val{16},... 		'Callback',['']);		uicontrol(xywind, 'Style', 'text',...		'Position', [xorig+145 ypos 55 20], 'String', 'Line Style');	line1styleH = uicontrol('Style','popup','Units','pixels',...		'Position',[xorig+205 ypos 75 20],...		'String',stylelist,...		'HorizontalAlignment', 'center',...		'Tooltip','Select the style for line 1',...		'Value', xy_val{17},... 		'Callback',['']);	ypos = ypos - 25;	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig ypos 55 20], 'String', 'Sym. Color');	head1colorH = uicontrol('Style','popup','Units','pixels',...		'Position',[xorig+60 ypos 75 20],...		'String',colorlist,...		'Tooltip','Select the color for line 1''s head',...		'HorizontalAlignment', 'center', 'Value', xy_val{18},... 		'Callback',['']);		uicontrol(xywind, 'Style', 'text',...		'Position', [xorig+145 ypos 55 20], 'String', 'Symbol');	head1symbolH = uicontrol('Style','popup','Units','pixels',...		'Position',[xorig+205 ypos 75 20],...		'String',symbolist,...		'Tooltip','Select the symbol for line 1''s head',...		'HorizontalAlignment', 'center','Value', xy_val{19},... 		'Callback',['']);	ypos = ypos - 30;   	uicontrol(xywind, 'Style', 'text',...		'Position', [xorig ypos 45 20], 'String', 'History');	historyH = uicontrol('Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xorig+50 ypos 75 20],'String', xy_val{20},...		 'Tooltip','Enter the length of the ''tail''',...		 'Callback',['']);	samp_or_secH = uicontrol('Style','popup','Units','pixels',...		'Position',[xorig+130 ypos 75 20],...		'String','seconds|samples',...		'Tooltip','History in seconds or in samples',...		'HorizontalAlignment', 'center', 'Value', xy_val{24},... 		'Callback',['']);   % cancel, apply, done	ypos = ypos - 30;   	cancelH = uicontrol('Style','pushbutton','Units','pixels',...	   'Position',[xorig+10 ypos 75 20],...	   'String','Cancel',...	   'Tooltip','Close and do not apply the settings.',...	   'HorizontalAlignment', 'center',...	   'Callback',['close(gcf)']);		applylH = uicontrol('Style','pushbutton','Units','pixels',...	   'Position',[xorig+100 ypos 75 20],...	   'String','Apply',...	   'Tooltip','Apply the settings and leave window open.',...	   'HorizontalAlignment', 'center',...	   'Callback',['xyplotsettings(''setvalues'');']);		doneH = uicontrol('Style','pushbutton','Units','pixels',...		'Position',[xorig+190 ypos 75 20],...		'String','Done',...		'Tooltip','Apply the settings and close the window.',...		'HorizontalAlignment', 'center',...		'Callback',['xyplotsettings(''setvalues'');','pause(0.5);','close(gcf)']);   % embed the handles + 'availchan' in the xywindow's user data.   % so we can access them in the 'setvalues' section   xy_hands = [windowtitleH, xdata1H,       xdata1velH,    xdata1accH,   ...               xdata1labelH, xdata1otherH,  ydata1H,       ydata1velH,   ...               ydata1accH,   ydata1labelH,  ydata1otherH,  xloH,         ...               xhiH,         yloH,          yhiH,          line1colorH,  ...               line1styleH,  head1colorH,   head1symbolH,  historyH,     ...               fplimhH,		  fplimvH,		  fvlimH,		  samp_or_secH, ...               autocalcH   ];   set(xywind,'Userdata',{xy_hands, availchan, 0}); elseif findstr(xy_button,'other')   %% can match 'x_other' or 'y_other'   % use 'gco' to get handle of calling 'other' button.   % open a inputdlg box to get the name of the variable   % store the string result in the 'Tag' of the 'other' button   caller_str = xy_button(1);    callerH = gco;      dlg_title = 'Select from the base workspace';   prompt = ['The name of the variable you wish to use as the ',...             upper(caller_str) ' data:'];   tempdlg = inputdlg(prompt,dlg_title);   if isempty(tempdlg), return; end   other_str = tempdlg{1};   % wow is this convoluted!  Create a global variable (ebtempresult) that   % can be accessed in both the function and the base workspace.   % Then see if the name of the variable (e.g. 'lhvf') exists in the base   % workspace.  If it does, 'ebtempresult' is set to 1, which can also be   % seen here in 'xyplotsettings'.   global ebtempresult   evalin('base','global ebtempresult')   ebtempresult = 0;   evalin('base',['ebtempresult = exist(' '''' other_str '''' ',''var'');'],...                   ['disp(''error'')'])   if ebtempresult>0      % good variable      % find its max and min.  store the values in 'UserData' of the button      maxval = max(eval(other_str));      minval = min(eval(other_str));      set(callerH,'Tag',other_str)      set(callerH,'String',['"' other_str '"'])      set(callerH,'UserData',[minval maxval])    else      % failed      set(callerH,'Tag','')      set(callerH,'String','Other...')   end   clear global ebtempresult elseif strcmp(xy_button,'datachange')   % called any time the data selection controls are activated.  Check to   % see if the data being represented has changed.  If so, set a flag(?)   % and/or rerun 'calclims'?  Set xlabel, ylabel , title edit fields to 'free'.   % Set new value for the control in the 'UserData' field for next comparison.   % Rerun 'setvalues'?   temp = get(xyfig,'Userdata');   xy_hands    = temp{1};   windowtitleH = xy_hands(1);   xdata1labelH = xy_hands(5);   ydata1labelH = xy_hands(10);   lastval = get(gco,'UserData');   curval  = get(gco,'Value');   if curval == lastval      return   end   set(gco,'UserData',curval);   datachangeflag=1;   set(windowtitleH,'Tag','free');   set(xdata1labelH,'Tag','free');   set(ydata1labelH,'Tag','free');   xyplotsettings('setvalues')   xyplotsettings('calclims')   elseif strcmp(xy_button,'calclims')   if isempty(xlowtemp),  xlowtemp=-5; end   if isempty(xhightemp), xhightemp=5; end   if isempty(ylowtemp),  ylowtemp=-5; end   if isempty(yhightemp), yhightemp=5; end   	xlowlim = xlowtemp; xhighlim = xhightemp;	ylowlim = ylowtemp; yhighlim = yhightemp;	[xmincalc, xmaxcalc] = axispad(xlowlim, xhighlim);	[ymincalc, ymaxcalc] = axispad(ylowlim, yhighlim);	   temp = get(xyfig,'Userdata');   xy_hands  = temp{1};   autocalcH = xy_hands(25);   temp = get(autocalcH,'UserData');	xhiH=temp(1); xloH=temp(2);	yhiH=temp(3); yloH=temp(4);	set(xloH,'string',num2str(xmincalc,'%5.1f'))	set(xhiH,'string',num2str(xmaxcalc,'%5.1f'))	set(yloH,'string',num2str(ymincalc,'%5.1f'))	set(yhiH,'string',num2str(ymaxcalc,'%5.1f'))	set(wf_axXY,'xlim',[xmincalc xmaxcalc],'ylim',[ymincalc ymaxcalc]) elseif strcmp(xy_button,'setvalues')	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	%%%%%%           read the controls & store                %%%%%%	%%%%%%           their values in the XY axis              %%%%%%	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   temp = get(xyfig,'Userdata');   xy_hands    = temp{1};   availchan   = temp{2};   windowtitleH = xy_hands(1);   xdata1H      = xy_hands(2);   xdata1velH   = xy_hands(3);   xdata1accH   = xy_hands(4);   xdata1labelH = xy_hands(5);   xdata1otherH = xy_hands(6);   ydata1H      = xy_hands(7);   ydata1velH   = xy_hands(8);   ydata1accH   = xy_hands(9);   ydata1labelH = xy_hands(10);   ydata1otherH = xy_hands(11);  xloH         = xy_hands(12);   xhiH         = xy_hands(13);  yloH         = xy_hands(14);   yhiH         = xy_hands(15);  line1colorH  = xy_hands(16);   line1styleH  = xy_hands(17);  head1colorH  = xy_hands(18);   head1symbolH = xy_hands(19);  historyH     = xy_hands(20);   fplimhH		 = xy_hands(21);  fplimvH      = xy_hands(22);   fvlimH       = xy_hands(23);  samp_or_secH = xy_hands(24);   autocalcH    = xy_hands(25);   windowtitle = get(windowtitleH,'string');      wt_locked = get(windowtitleH,'Tag');   xl_locked = get(xdata1labelH,'Tag');   yl_locked = get(ydata1labelH,'Tag');   xdata1      = get(xdata1H,'value');   xdata1vel   = get(xdata1velH,'value');   xdata1acc   = get(xdata1accH,'value');   xdata1label = get(xdata1labelH,'string');   xdata1other = get(xdata1otherH,'Tag');      ydata1      = get(ydata1H,'value');   ydata1vel   = get(ydata1velH,'value');   ydata1acc   = get(ydata1accH,'value');   ydata1label = get(ydata1labelH,'string');   ydata1other = get(ydata1otherH,'Tag');   fplimh = str2num(get(fplimhH,'String'));   fplimv = str2num(get(fplimvH,'String'));   fvlim  = str2num(get(fvlimH,'String'));   line1color  = get(line1colorH,'value');   line1style  = get(line1styleH,'value');   head1color  = get(head1colorH,'value');   head1symbol = get(head1symbolH,'value');      history     = get(historyH,'string');   samp_or_sec = get(samp_or_secH,'value');   % Dynamically place the string results into   % the XY plot's title, x- and y-label strings.   titleH = get(wf_axXY,'Title');   yLabH  = get(wf_axXY,'Ylabel');   xLabH  = get(wf_axXY,'Xlabel');   % Normally, we just get the channel name from the 'xdata1' popup menu, and   % read the 'xdata1vel' and 'xdata1acc' checkboxes to determine pos/vel/acc.   % We pass this info along in x/y_dat_str and also use to calc title, x,y labels.   % However, if the 'other' button (x/ydata1other) has an string (name of a   % variable), pass it along to 'ebAct3D' in x/y_dat_str, e.g. 'lhvf_other'.   % Make an attempt to parse it for eye/plane/deriv so we can set   % the title and x,y labels of the XY plot. If we can't, well too bad.   if isempty(xdata1other)		numchan=length(findstr(availchan,'|'));		temp=availchan;		for i=1:xdata1, [x_chan{i},temp]=strtok(temp,'|'); end		x_eye = x_chan{i}(1);		x_dir = x_chan{i}(2);		if strcmp(x_eye,'l'), x_eye = 'Left Eye'; else x_eye = 'Right Eye'; end 		switch x_dir			case 'h', x_dir = 'Horizontal';			case 'v', x_dir = 'Vertical';			case 't', x_dir = 'Torsional';		end 		% do we want its velocity, or its accel?		x_unit_str = ['Pos (' degstr ')'];		if xdata1vel, x_unit_str = ['Vel (' degstr '/sec)'];   end		if xdata1acc, x_unit_str = ['Accel (' degstr '/sec^2)']; end      x_dat_str = lower([x_eye(1) x_dir(1) ',' x_unit_str(1:3)]);  % e.g. 'lh,pos'            % finally, find the max and min values for the selected data      % x_chan{1} contains the name of the selected data.      temp = eval(x_chan{1});      if xdata1vel, temp=d2pt(temp,2); end      if xdata1acc, temp=d2pt(temp,2); temp=d2pt(temp,2); end      xhightemp = max(temp); xlowtemp  = min(temp);    else      % we're just guessing here.  Hoping that the user has made an attempt      % to name the 'other' data in a reasonable way.  By 'reasonable' we      % assume that 1st letter is eye, 2nd letter is plane.  For 3rd letter it      % gets a little tricky, as it could be a vel (or acc), if the user wanted      % to differentiate with a value other than the default of '2', but it could      % instead be something else, like 'f' for filtered data, or what-have-you.      % Basically, if it's not 'v' or 'a' there's not much to do.		x_eye = xdata1other(1);		if length(xdata1other)>=2, x_dir = xdata1other(2); else x_dir = ''; end		if length(xdata1other)>=3, x_3rd = xdata1other(3); else x_3rd = ''; end				temp = get(xdata1otherH,'UserData');		xlowtemp = temp(1); xhightemp = temp(2);				switch lower(x_eye)			case  'l', x_eye = 'Left Eye';			case  'r', x_eye = 'Right Eye';			otherwise, x_dir = '???';		end			switch lower(x_dir)			case  'h', x_dir = 'Horizontal';			case  'v', x_dir = 'Vertical';			case  't', x_dir = 'Torsional';			otherwise, x_dir = '???';		end 		switch lower(x_3rd)			case   'v', x_unit_str = ['Vel (' degstr '/sec)'];			case   'a', x_unit_str = ['Accel (' degstr '/sec^2)'];			otherwise , x_unit_str = ['Pos (' degstr ')'];		end       x_dat_str = lower([xdata1other ',other']);     end      	% do the y axis data now   if isempty(ydata1other)		temp=availchan;		for i=1:ydata1, [y_chan{i},temp]=strtok(temp,'|'); end		y_eye = y_chan{i}(1);		y_dir = y_chan{i}(2);		if strcmp(y_eye,'l'), y_eye = 'Left Eye';   else y_eye = 'Right Eye'; end 		switch y_dir			case 'h', y_dir = 'Horizontal';			case 'v', y_dir = 'Vertical';			case 't', y_dir = 'Torsional';		end 			% do we want its velocity, or its accel?		y_unit_str = ['Pos (' degstr ')'];		if ydata1vel, y_unit_str = [  'Vel (' degstr '/sec)'  ]; end		if ydata1acc, y_unit_str = ['Accel (' degstr '/sec^2)']; end			if isempty(ydata1other)			y_dat_str = lower([y_eye(1) y_dir(1) ',' y_unit_str(1:3)]);  % e.g. 'rv,vel'		 else			y_dat_str = lower([ydata1other ',other']);  		end		      temp = eval(y_chan{1});      if ydata1vel, temp=d2pt(temp,2); end      if ydata1acc, temp=d2pt(temp,2); temp=d2pt(temp,2); end      yhightemp = max(temp); ylowtemp = min(temp);    else		y_eye = ydata1other(1);		if length(ydata1other)>=2, y_dir = ydata1other(2); else y_dir = ''; end		if length(ydata1other)>=3, y_3rd = ydata1other(3); else y_3rd = ''; end		temp = get(ydata1otherH,'UserData');		ylowtemp = temp(1); yhightemp = temp(2);		switch lower(y_eye)			case  'l', y_eye = 'Left Eye';			case  'r', y_eye = 'Right Eye';			otherwise, y_dir = '???';		end			switch lower(y_dir)			case  'h', y_dir = 'Horizontal';			case  'v', y_dir = 'Vertical';			case  't', y_dir = 'Torsional';			otherwise, y_dir = '???';		end 		switch lower(y_3rd)			case   'v', y_unit_str = ['Vel (' degstr '/sec)'];			case   'a', y_unit_str = ['Accel (' degstr '/sec^2)'];			otherwise , y_unit_str = ['Pos (' degstr ')'];		end       y_dat_str = lower([ydata1other ',other']);     end	%%%%%   Calculate the title string, x- and y-label strings  %%%%   plot_type = 'unknown';	if strcmp(x_eye,y_eye)     % same eye for x,y could be SP or PP	   which_eye = x_eye;      % could have said 'y_eye'	   if strcmp(x_dir,y_dir)  % do a phase plane	      which_dir = x_dir;   % could have said 'y_dir'	      	      % only makes sense if different units	      if strcmp(x_unit_str,y_unit_str)				windowstr = ['???: ' which_eye ', ' which_dir];	       else				windowstr = ['Phase Plane: ' which_eye ', ' which_dir];			   plot_type = 'phaseplane';			end			xlabelstr = x_unit_str;			ylabelstr = y_unit_str;		 else                   % do a scanpath	      % only makes sense if SAME units	      which_dir='';	      if strcmp(x_unit_str,y_unit_str)   			windowstr = ['Nystagmus Scanpath: ' which_eye];			   plot_type = 'scanpath';	       else				windowstr = ['???: ' which_eye];			end			xlabelstr = [x_dir ' ' x_unit_str];			ylabelstr = [y_dir ' ' y_unit_str];		end		  else                	   % must be a conjugacy plot	   which_dir = x_dir;      % could have said 'y_dir'		% only makes sense if SAME units		if strcmp(x_unit_str,y_unit_str) & strcmp(x_dir,y_dir)		   windowstr = ['Conjugacy Plot: ' which_dir];		   plot_type = 'conjugacy';		 else			windowstr = ['????: '];		end		xlabelstr = [x_eye ' ' x_unit_str];		ylabelstr = [y_eye ' ' y_unit_str];	end		% if we still don't have x,y limits set, use default +/-5 values.   xlowNum  = str2num(get(xloH,'String'));   if isempty(xlowNum), xlowNum=-5; end	xhighNum = str2num(get(xhiH,'String'));   if isempty(xhighNum), xhighNum=5; end   ylowNum  = str2num(get(yloH,'String'));   if isempty(ylowNum), ylowNum=-5; end	yhighNum = str2num(get(yhiH,'String'));   if isempty(yhighNum), yhighNum=5; end   % make axes pretty...   	set(xloH,'string',num2str(xlowNum,'%5.1f'))	set(xhiH,'string',num2str(xhighNum,'%5.1f'))	set(yloH,'string',num2str(ylowNum,'%5.1f'))	set(yhiH,'string',num2str(yhighNum,'%5.1f'))	set(wf_axXY,'xlim',[xlowNum xhighNum],'ylim',[ylowNum yhighNum])		figure(wfig); subplot(wf_axXY)	% clear out the previous (if any) fov extent, conjugacy lines, or fov window	% NaN out the wf_dataXY and wf_overXY lines	xyplot_tempH = findobj('Tag','xyplot_temp');	delete(xyplot_tempH)	datalinesH = get(wf_axXY,'Children');	set(datalinesH,'XData',NaN); set(datalinesH,'YData',NaN);	   % lines for the X and Y axes -- color will be a saved pref?	line([-9999 9999 NaN 0 0], [0 0 NaN -9999 9999],...	       'color', DKGRAY,'Tag','xyplot_temp');            %% changed from DKORANGE   % pick the correct limits for fovea	if strcmp(which_dir,'Horizontal')		fplim=fplimh;	  elseif strcmp(which_dir,'Vertical')		fplim=fplimv; 	  elseif strcmp(which_dir,'Torsional')		fplim=sqrt(fplimh^2 + fplimv^2);	  else	   ;	end	% add the fovea/foveation window appropriate to the xy plot being made	if strcmp(plot_type, 'phaseplane')	   % draw foveation window      line([-fplim    fplim   fplim   -fplim   -fplim], ...           [-fvlim   -fvlim   fvlim    fvlim   -fvlim],...		      'color', MEDGRAY, 'LineStyle','--','Tag','xyplot_temp');	 elseif strcmp(plot_type, 'scanpath')	   % draw a foveal extent		x=fplimh*cos(-0.1:0.1:2*pi);		y=fplimv*sin(-0.1:0.1:2*pi);		line(x, y, 'color', DKGRAY, 'LineStyle','-.','Tag','xyplot_temp');		%% changed from ORANGE	 elseif strcmp(plot_type, 'conjugacy')		x=fplimh*cos(-0.1:0.1:2*pi);		y=fplimv*sin(-0.1:0.1:2*pi);   	line(x, y, 'color', ORANGE, 'LineStyle','-.','Tag','xyplot_temp');	   % draw 45, 135 degree lines (x=y)		line([-9999 9999 NaN -9999 9999], [-9999 9999 NaN 9999 -9999],...		      'color', MEDGRAY, 'LineStyle','--','Tag','xyplot_temp');	end	figure(xyfig) 	% set the axis title and the x,y labels	% if we set the xyplotsetting title,x,y fields here, set the tag to 'free'	% so that we know it was NOT the user who entered the text, but the auto	% calculation that did.		if isempty(windowtitle) | strcmp(get(windowtitleH,'Tag'),'free')		set(titleH,'String',windowstr)		set(windowtitleH,'String', windowstr, 'Tag', 'free')	 else		set(titleH,'String',windowtitle)	end		if isempty(xdata1label) | strcmp(get(xdata1labelH,'Tag'),'free')		set(xLabH, 'String',xlabelstr)		set(xdata1labelH, 'String', xlabelstr, 'Tag', 'free')	 else		set(xLabH, 'String',xdata1label)	end 	if isempty(ydata1label) | strcmp(get(ydata1labelH,'Tag'),'free')		set(yLabH, 'String',ylabelstr)		set(ydata1labelH, 'String',ylabelstr)	 else		set(yLabH, 'String', ydata1label, 'Tag', 'free')	end       % store the control values + x,y selections in the XY axis user data.   xlowlim=get(xloH,'String');    xhighlim=get(xhiH,'String');   ylowlim=get(yloH,'String');    yhighlim=get(yhiH,'String');      xy_val = {windowtitle  xdata1        xdata1vel     xdata1acc   ...             xdata1label  xdata1other   ydata1        ydata1vel   ...             ydata1acc    ydata1label   ydata1other   xlowlim     ...             xhighlim     ylowlim       yhighlim      line1color  ...             line1style   head1color    head1symbol   history     ...             fplimh		  fplimv        fvlim         samp_or_sec ...             wt_locked	  xl_locked		 yl_locked     x_dat_str   ....             y_dat_str   };   set(wf_axXY, 'Userdata', {xy_val {0 0} 1 })   %disp('putting xy_val into wf_axXY')end   return