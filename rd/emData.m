classdef emData < dynamicprops
   % emData: Contains lots of properties for storing and analyzing eye movements
   % 
   % An emData variable is created when you load in data using 'rd' or 
   % 'datstat' (which runs on top of rd, providing a GUI for your loaded data)
   %
   % Type 'fields(emData)' for a list of all properties. There are additional
   % built-in fields for your convenience, but if you want to create custom
   % ones, create a new instance, e.g., xxxx = emData; and then use
   % addprop(xxxx,'newprop') to add extra fields to this class.
   
   properties
      recmeth = '';   % IR, VID, COIL, RCOIL
      start_times = []; % if sharing common timebase w/external data samples
      filename = '';
      pathname = '';
      comments = '';
      chan_names = {};
      %iscalibrated=0;
      vframes = [];
      calibrations = [];
      samp_freq = 0; % uint?
      numsamps =  0; % ?, uint32?
      h_pix_z = 0; h_pix_deg = 0;
      v_pix_z = 0; v_pix_deg = 0;
      
      rh=struct('pos',[],'channel','rh','chan_comment',[], ...
         'unfiltered',[],'filt_params',struct('type','','order',0,'cutoff',0), ...         
         'saccades',struct('paramtype',[],'sacclist',struct()),...
         'blink',   struct('paramtype',[],'blinklist',struct()),...
         'fixation',struct('paramtype',[],'fixlist', struct()) );
      lh=struct('pos',[],'channel','lh','chan_comment',[], ...
         'unfiltered',[],'filt_params',struct('type','','order',0,'cutoff',0), ...
         'saccades',struct('paramtype',[],'sacclist',struct()),...
         'blink',   struct('paramtype',[],'blinklist',struct()),...
         'fixation',struct('paramtype',[],'fixlist', struct()) );
      rv=struct('pos',[],'channel','rv','chan_comment',[], ...
         'unfiltered',[],'filt_params',struct('type','','order',0,'cutoff',0), ...
         'saccades',struct('paramtype',[],'sacclist',struct()),...
         'blink',   struct('paramtype',[],'blinklist',struct()),...
         'fixation',struct('paramtype',[],'fixlist', struct()) );
      lv=struct('pos',[],'channel','lv','chan_comment',[], ...
         'unfiltered',[],'filt_params',struct('type','','order',0,'cutoff',0), ...
         'saccades',struct('paramtype',[],'sacclist',struct()),...
         'blink',   struct('paramtype',[],'blinklist',struct()),...
         'fixation',struct('paramtype',[],'fixlist', struct()) );
      rt=struct('pos',[],'channel','rt','chan_comment',[], ...
         'unfiltered',[],'filt_params',struct('type','','order',0,'cutoff',0), ...
         'saccades',struct('paramtype',[],'sacclist',struct()),...
         'blink',   struct('paramtype',[],'blinklist',struct()),...
         'fixation',struct('paramtype',[],'fixlist', struct()) );
      lt=struct('pos',[],'channel','lt','chan_comment',[], ...
         'unfiltered',[],'filt_params',struct('type','','order',0,'cutoff',0), ...
         'saccades',struct('paramtype',[],'sacclist',struct()),...
         'blink',   struct('paramtype',[],'blinklist',struct()),...
         'fixation',struct('paramtype',[],'fixlist', struct()) );
      hh=struct('pos',[],'channel','hh','chan_comment',[], ...
         'filt_params',struct('type','','order',0,'cutoff',0));
      hv=struct('pos',[],'channel','hv','chan_comment',[], ...
         'filt_params',struct('type','','order',0,'cutoff',0));
      st=struct('pos',[],'channel','st','chan_comment',[], ...
         'filt_params',struct('type','','order',0,'cutoff',0));
      sv=struct('pos',[],'channel','sv','chan_comment',[], ...
         'filt_params',struct('type','','order',0,'cutoff',0));
      st2=struct('pos',[],'channel','st2','chan_comment',[], ...
         'filt_params',struct('type','','order',0,'cutoff',0));
      sv2=struct('pos',[],'channel','sv2','chan_comment',[], ...
         'filt_params',struct('type','','order',0,'cutoff',0));
      st3=struct('pos',[],'channel','st3','chan_comment',[], ...
         'filt_params',struct('type','','order',0,'cutoff',0));
      sv3=struct('pos',[],'channel','sv3','chan_comment',[], ...
         'filt_params',struct('type','','order',0,'cutoff',0));
      st4=struct('pos',[],'channel','st4','chan_comment',[], ...
         'filt_params',struct('type','','order',0,'cutoff',0));
      sv4=struct('pos',[],'channel','sv4','chan_comment',[], ...
         'filt_params',struct('type','','order',0,'cutoff',0));

      ds=struct('pos',[],'channel','ds','chan_comment',[]);
      tl=struct('pos',[],'channel','tl','chan_comment',[]);
      
      digdata  = {};
      digdata2 = {};
      digdata3 = {};
      digdata4 = {};
      other    = {};
      other2   = {};
      other3   = {};
      other4   = {};
   end
                                                        
   methods
      % export basic data to base workspace
      % save filled emData struct as .mat file
   end
   
end

