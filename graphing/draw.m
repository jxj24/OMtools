% draw.m: Draw lines, arrows, circles or rectangles in the current figure.% Click on the radio button next to the object you want to draw.% To quit, click the 'Done' button.  To suspend drawing temporarily, but% keep the drawing palette open, click the 'None' button.% NOTE: There is an important difference between the two types of circles% available -- 'Circle (data)' draws circles that use the values of the x-% and y- axes.  If the axes do not have the same range and length the circle% will appear distorted.  'Circle(axis)' draws circles that will appear% correctly for the axis ratios at which is was drawn.  It may be possible% some day to draw pixel-based circles...% Recognized actions: initialize, on, off, done% Recognized actions: arrow, line, rectangle, circleS, circleT% Written by:  Jonathan Jacobs%              March 1997 - May 1998 (last mod: 05/19/98)function draw(action)if isempty(get(0,'Child'))   disp('No windows were open, guy.')   returnendglobal objtype drawRB doneH noneH drawFig drawWinHglobal drawMsg drawState dragStateglobal drawStartXPos drawStartYPosscrsize = get(0,'Screensize');maxHgt = scrsize(4);maxWid = scrsize(3);% check if the axis editing window is already open% if it is, bring it to the frontwNum = findme('drawEditingWindow');alreadyOpen = 0;if wNum > -1   figure(wNum)   alreadyOpen = 1;endif nargin == 0, action = 'initialize'; enddrawFig = findHotW;if drawFig == -1   disp('No graph window found.  Possible reasons:')   disp(' * You don''t have a figure window open.')   disp(' * You are trying to draw in a Zoomtool window.')   disp(' * I am having a nervous breakdown.')   clear global objtype drawRB doneH noneH drawFig drawWinH   clear global drawMsg drawState dragState gdUnitH   clear global drawStartXPos drawStartYPos   returnendfontsize=12;GREY = [0.66 0.66 0.66];if strcmp(action,'initialize') && ~alreadyOpen   drawMsg = 0;   fig_width  = 125;   fig_height = 210;   % Set the window position.  Check if the window is already open.   % If not, then we will first try to read its last saved position from   % the pref file.  If not, we will place it at its default position.   % Make sure that it will be drawn completely on the screen.   % If not, move it so that it will.   dErrFlag=0; fErrFlag=0;   if isempty(drawStartXPos)      curdir=pwd;      cd(matlabroot)      try    cd(findomprefs)      catch, dErrFlag=1;      end      if dErrFlag         mkdir_stat = mkdir('omprefs');         if ~mkdir_stat            disp('** draw: Unable to create ''omprefs'' dir in MATLAB root dir.')            disp('** You may continue, but prefs will not be saved.')         end      else         try    load drawPref.mat drawStartXPos drawStartYPos         catch, fErrFlag=1; end         if fErrFlag            drawStartXPos = 50;            drawStartYPos = 100;            save drawPref.mat drawStartXPos drawStartYPos         end                  cd(curdir)         if drawStartXPos<1,drawStartXPos=1;end         if drawStartYPos<1,drawStartYPos=1;end         if (drawStartYPos+fig_height)>maxHgt            drawStartYPos=maxHgt-fig_height;         end         if (drawStartXPos+fig_width)>maxWid            drawStartXPos=maxWid-fig_width;         end      end      eval(['cd ' '''' curdir ''''])   end      if dErrFlag || fErrFlag      drawStartXPos = 20;      drawStartYPos = (maxHgt-fig_height)/2;   end      drawWinH = figure('Numbertitle', 'off', 'Name', 'Drawing tools',...      'Resize','off','MenuBar','none','NextPlot','new',...      'Tag','drawEditingWindow','Color','k',...      'Position', [drawStartXPos drawStartYPos fig_width fig_height]);      y_pos = fig_height-25;   uicontrol('Style','text','String','Object drawing','FontSize',fontsize, ...      'Pos',[5,y_pos,110,20])      uicontrol('Style','Frame','Position',[2 y_pos-127 117 125]);      y_pos = y_pos-25;   drawRB(1) = uicontrol('Style', 'radio', 'Position', [5, y_pos, 110, 20],...      'String', '   Line', 'Value', 1, 'FontSize',fontsize, ...      'UserData', drawRB,...      'BackgroundColor',GREY,'ForegroundColor','k',...      'Callback', 'draw(''line'');' );      y_pos = y_pos-25;   drawRB(2) = uicontrol('Style', 'radio', 'Value', 0, ...      'Position', [5, y_pos, 110, 20],...      'String', '   Arrow', 'FontSize',fontsize, ...      'UserData', drawRB,...      'BackgroundColor',GREY,'ForegroundColor','k',...      'Callback', 'draw(''arrow'');' );      y_pos = y_pos-25;   drawRB(3) = uicontrol('Style', 'radio', 'Value', 0,...      'Position', [5, y_pos, 110, 20],...      'String', '   Rectangle', 'FontSize',fontsize, ...      'UserData', drawRB,...      'BackgroundColor',GREY,'ForegroundColor','k',...      'Callback', 'draw(''rectangle'');' );      y_pos = y_pos-25;   drawRB(4) = uicontrol('Style', 'radio', 'Value', 0, ...      'Position', [5, y_pos, 110, 20],...      'String', '   Circle (axis)', 'FontSize',fontsize, ...      'UserData', drawRB,...      'BackgroundColor',GREY,'ForegroundColor','k',...      'Callback', 'draw(''circleS'');' );      y_pos = y_pos-25;   drawRB(5) = uicontrol('Style', 'radio',  'Value', 0,...      'Position', [5, y_pos, 110, 20],...      'String', '   Circle (data)', 'FontSize',fontsize, ...      'UserData', drawRB,...      'BackgroundColor',GREY,'ForegroundColor','k',...      'Callback', 'draw(''circleT'');' );         y_pos = y_pos-30;   onH = uicontrol('Style', 'PushButton', 'Position', [10, y_pos, 50, 20],...      'String', 'On', 'FontSize',fontsize, ...      'Callback', 'draw(''on'');' );   offH = uicontrol('Style', 'PushButton', 'Position', [70, y_pos, 50, 20],...      'String', 'Off', 'FontSize',fontsize, ...      'Callback', 'draw(''off'');' );      y_pos = y_pos-23;   doneH = uicontrol('Style', 'PushButton', 'Position', [40, y_pos, 50, 20],...      'String', 'Done','FontSize',fontsize, ...      'Callback', 'draw(''done'');' );      objtype = 'Line';         draw('on')   drawState = 1;   elseif strcmp(action, 'line')   set(drawRB(1), 'Value', 1);   set(drawRB(2), 'Value', 0);   set(drawRB(3), 'Value', 0);   set(drawRB(4), 'Value', 0);   set(drawRB(5), 'Value', 0);   figure(drawFig);   objtype = 'Line';   drawState = 1;   draw('on')   elseif strcmp(action, 'arrow')   set(drawRB(1), 'Value', 0);   set(drawRB(2), 'Value', 1);   set(drawRB(3), 'Value', 0);   set(drawRB(4), 'Value', 0);   set(drawRB(5), 'Value', 0);   figure(drawFig);   objtype = 'Arrow';   drawState = 1;   draw('on')   elseif strcmp(action, 'rectangle')   set(drawRB(1), 'Value', 0);   set(drawRB(2), 'Value', 0);   set(drawRB(3), 'Value', 1);   set(drawRB(4), 'Value', 0);   set(drawRB(5), 'Value', 0);   figure(drawFig);   objtype = 'Rectangle';   drawState = 1;   draw('on')   elseif strcmp(action, 'circleS')   set(drawRB(1), 'Value', 0);   set(drawRB(2), 'Value', 0);   set(drawRB(3), 'Value', 0);   set(drawRB(4), 'Value', 1);   set(drawRB(5), 'Value', 0);   figure(drawFig);   objtype = 'CircleS';   drawState = 1;   draw('on')   elseif strcmp(action, 'circleT')   set(drawRB(1), 'Value', 0);   set(drawRB(2), 'Value', 0);   set(drawRB(3), 'Value', 0);   set(drawRB(4), 'Value', 0);   set(drawRB(5), 'Value', 1);   figure(drawFig);   objtype = 'CircleT';   drawState = 1;   draw('on')   elseif strcmp(action, 'off')   set(drawRB(1), 'Value', 0);   set(drawRB(2), 'Value', 0);   set(drawRB(3), 'Value', 0);   set(drawRB(4), 'Value', 0);   set(drawRB(5), 'Value', 0);   objtype = 'none';   figure(drawFig)   drawState = 0;   gDraw('stop')   elseif strcmp(action, 'on')   if dragState      dragger('dragoff');   end   drawFig = findHotW;   figure( drawFig )   if strcmp(objtype,'none')      objtype = 'line';      set(drawRB(1), 'Value', 1);   end   gDraw('start')   drawState = 1;   elseif strcmp(action, 'done')   curdir=pwd;   dErrFlag=0;   eval(['cd ' '''' matlabroot ''''])   try    cd(findomprefs)   catch, dErrFlag=1;   end   startXYPos = get(drawWinH, 'Position');   drawStartXPos = startXYPos(1);   drawStartYPos = startXYPos(2);   if ~dErrFlag, eval('save drawPref.mat drawStartXPos drawStartYPos'), end   cd(curdir)   close(drawWinH)   figure(drawFig)   gDraw('stop')   clear global objtype state drawRB doneH noneH drawFig   clear global drawWinH drawMsg drawState   clear global drawStartXPos drawStartYPos gdUnitHend%%% put the globals into the draw window 'UserData' field?