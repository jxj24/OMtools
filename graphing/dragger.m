% dragger.m:   enable dragging in a figure% Written by:  Jonathan Jacobs%              March 1997 - August 2000 (last mod: 08/29/00)function dragger(action)if isempty(get(0,'Child'))   disp('No windows were open, boss.')   returnendif nargin == 0, action = 'initialize'; endfontsize = 12;GREY = [0.66 0.66 0.66];% check if the axis editing window is already open% if it is, bring it to the frontwNum = findme('dragEditingWindow');alreadyOpen = 0;if wNum > -1   figure(wNum)   alreadyOpen = 1;endglobal drag_hList hxl hyl hzl htl dragMsg dragRB % ylm ytmglobal dragFig dragWinH axHoldH actWinH dragState drawStateglobal dataLockXH dataLockYH dataLockZHglobal dataLockX dataLockY dataLockZglobal dragStartXPos dragStartYPosscrsize = get(0,'Screensize');maxHgt = scrsize(4);maxWid = scrsize(3);% make sure we have a valid window and that it's not emptyerrFlag = 0;dragFig = findHotW;if ishandle(dragFig)   dragFigNum=dragFig.Number;elseif dragFig >= 1   dragFigNum = dragFig;else   if strcmp(action,'dragquit')      close(dragWinH)   else      disp('No graph window found.  Possible reasons:')      disp(' * You don''t have a figure window open.')      disp(' * You are trying to edit a Zoomtool window.')      disp(' * I am having a nervous breakdown.')   end   errFlag = 1;end%windText =  get(dragFig,'Tag');%if strcmp(lower(windText),'zoomed window')%   disp( 'dragger doesn''t like zoomtool windows.')%   errFlag = 1;%end%if strcmp( windText(5:length(windText)), 'EditingWindow')%   disp( 'dragger sez: Bring a graph window to the front and try again.')%   errFlag = 1;%endif errFlag   clear global drag_hList ylm ytm hxl hyl htl status dragMsg   clear global dragFig dragWinH axHoldH dragRB dragInited   clear global dataLockXH dataLockYH dataLockZH   clear global dataLockX dataLockY dataLockZ   clear global dragStartXPos dragStartYPos   returnendtempga = get(dragFig,'Children');if isempty(tempga)   disp('Nothing to drag, boss.  Dragging is off.')   clear global drag_hList ylm ytm hxl hyl hzl htl dragMsg   clear global axHoldH dragFig dragWinH dragRB dragInited   clear global dataLockXH dataLockYH dataLockZH   clear global dataLockX dataLockY dataLockZ   clear global dragStartXPos dragStartYPos   returnend% this little bit of fun is needed because not every child in the figure is an axis.ch = get(dragFig,'Children');numCh = length(ch);if numCh == 0   disp('No axes, Eugene.')   returnendcount = 0;for i = 1:numCh   if strcmpi(get(ch(i),'type'),'axes')      count = count + 1;      ga(count) = ch(i);      temp = lower(get(ga(count),'XLimMode'));      if temp(1) == 'a'         axXLM(i) = 0;      else         axXLM(i) = 1;      end      temp = lower(get(ga(count),'YLimMode'));      if temp(1) == 'a'         axYLM(i) = 0;      else         axYLM(i) = 1;      end      temp = lower(get(ga(count),'ZLimMode'));      if temp(1) == 'a'         axZLM(i) = 0;      else         axZLM(i) = 1;      end      %         set(ga(i),'XLimMode','auto');      %         set(ga(i),'YLimMode','auto');      %         set(ga(i),'ZLimMode','auto');   endendnumAxes = length(ga);if strcmp(action, 'initialize') && ~alreadyOpen   dragMsg = 0;   windText =  get(dragFig,'Tag');   if strcmp( windText(5:length(windText)), 'EditingWindow')      disp( 'drager: Bring a figure window to the front and try again.')      return   end   fig_height = 238;   fig_width  = 130;   dragStartXPos = 50;   %% default value   dragStartYPos = 100;  %% default value      % Set the window position.  Check if the window is already open.   % If not, then we will first try to read its last saved position from   % the pref file.  If not, we will place it at its default position.   % Make sure that it will be drawn completely on the screen.   % If not, move it so that it will.   dErrFlag=0; fErrFlag=0;   curdir=pwd;   eval(['cd ' '''' matlabroot ''''])   try      cd(findomprefs)   catch      dErrFlag=1;   end   if dErrFlag      mkdir_stat = mkdir('omprefs');      if ~mkdir_stat         disp('** dragger: Unable to create ''omprefs'' dir in MATLAB root dir.')         disp('** You may continue, but prefs will not be saved.')      end   else      try         load dragPref.mat dragStartXPos dragStartYPos      catch         fErrFlag=1;      end      if fErrFlag         dragStartXPos = 50;         dragStartYPos = 100;         save dragPref.mat dragStartXPos dragStartYPos      end            eval(['cd ' '''' curdir ''''])      % make sure that the window will be on the screen!      if dragStartXPos<1,dragStartXPos=1;end      if dragStartYPos<1,dragStartYPos=1;end      if (dragStartYPos+fig_height)>maxHgt         dragStartYPos=maxHgt-fig_height;      end      if (dragStartXPos+fig_width)>maxWid         dragStartXPos=maxWid-fig_width;      end   end   cd(curdir)      if dErrFlag || fErrFlag      dragStartXPos = 20;      dragStartYPos = (maxHgt - fig_height)/2;   end      if isempty(dragStartXPos) || isempty(dragStartYPos)      dragStartXPos = 50;   %% default value      dragStartYPos = 100;  %% default value   end      dragWinH = figure('Numbertitle', 'off', 'Name', 'Drag',...      'Resize','off','MenuBar','none',...      'NextPlot','new', ...      'Tag','dragEditingWindow','Color','k',...      'Position', [dragStartXPos dragStartYPos fig_width fig_height]);      y_pos = fig_height-25;   uicontrol('Style', 'text', 'String', 'Drag Control', ...      'FontSize',fontsize, 'Pos',[5,y_pos+3,120,20])   y_pos = y_pos-32;      uicontrol('Style', 'Frame','Pos',[4,y_pos-3,100,37])   uicontrol('Style', 'text', 'String', ['Active' 13 'Window'],...      'FontSize',fontsize, 'Pos',[5,y_pos-2,60,35])   actWinH = uicontrol('Style', 'text', 'String', num2str(dragFigNum),...      'BackgroundColor','c','ForegroundColor','k',...      'FontSize',fontsize, 'Pos',[70,y_pos+2,30,26]);      y_pos = y_pos-25;   uicontrol('Style','frame','Position',[3 y_pos-28 95 50])   dragRB(1) = uicontrol('Style', 'radio', 'Position', [5, y_pos, 90, 20],...      'String', '   Drag on', 'Value', 1,...      'FontSize',fontsize, ...      'UserData', dragRB,...      'BackgroundColor',GREY,'ForegroundColor','k',...      'Callback', 'dragger(''dragon'');' );   y_pos = y_pos-25;   dragRB(2) = uicontrol('Style', 'radio', 'Position', [5, y_pos, 90, 20],...      'String', '   Drag off', 'Value', 0,...      'FontSize',fontsize, ...      'UserData', dragRB,...      'BackgroundColor',GREY,'ForegroundColor','k',...      'Callback', 'dragger(''dragoff'');' );      y_pos = y_pos-25;   axHoldH = uicontrol('Style', 'checkbox', 'Position', [5, y_pos, 90, 20],...      'String', 'Axis Hold', 'UserData', dragFig,'Value',axXLM(1),...      'FontSize',fontsize, ...      'ForegroundColor',[0 0 0],...      'Callback', 'dragger(''axHold'');' );      uicontrol('Style','frame','position',[4, y_pos-77, 105,74]);   y_pos = y_pos-25;   dataLockX = 1;   dataLockXH = uicontrol('Style', 'checkbox',...      'Position', [5, y_pos, 90, 20], 'Value',dataLockX,...      'String', 'X-Data Lock', 'UserData', dragFig,...      'FontSize',fontsize, ...      'Callback', 'dragger(''dataLockX'');' );   y_pos = y_pos-25;   dataLockY = 0;   dataLockYH = uicontrol('Style', 'checkbox',...      'Position', [5, y_pos, 90, 20], 'Value',dataLockY,...      'String', 'Y-Data Lock', 'UserData', dragFig,...      'FontSize',fontsize, ...      'Callback', 'dragger(''dataLockY'');' );   y_pos = y_pos-25;   dataLockZ = 1;   dataLockZH = uicontrol('Style', 'checkbox',...      'Position', [5, y_pos, 90, 20], 'Value',dataLockZ,...      'String', 'Z-Data Lock', 'UserData', dragFig,...      'FontSize',fontsize, ...      'Callback', 'dragger(''dataLockZ'');' );      y_pos = y_pos-25;   doneH = uicontrol('Style', 'PushButton', 'Position', [5, y_pos, 50, 20],...      'String', 'Done', 'UserData', dragFig,...      'FontSize',fontsize, ...      'Callback', 'dragger(''dragquit'');' );   updH = uicontrol('Style', 'PushButton', 'Position', [65, y_pos, 50, 20],...      'String', 'Update', 'UserData', dragFig,...      'FontSize',fontsize, ...      'Callback', 'dragger(''update'');' );      % set the editing window so that we can't plot anything in it   mlVer = version;   if mlVer(1) == '4'      set(dragWinH, 'NextPlot', 'new');   elseif mlVer(1) >= '5'      %hidegui   else      error('unknown MATLAB version!')   end      figure(dragFig)   dragger('dragon')      elseif strcmp(action, 'dragon')   if drawState      %disp('dragger sez: draw off')      figure(dragFig)      draw('off')   end   figure(dragFig)   if (dragMsg)      disp('Object dragging active.')      disp('Type ''dragger'' again to stop object dragging.')   end   % initialize matrices   drag_hList = []; lineH = []; textH = [];   hxl = []; hyl = []; htl = [];      % get all the lines, text & patches in the figure   for j=1:numAxes      lineH = findobj(ga(j),'type','line');      numLines = length(lineH);      textH = findobj(ga(j),'type','text');      numText = length(textH);      patchH = findobj(gca,'type','patch');      numPatch = length(patchH);      hxl(j) = get(ga(j),'XLabel');  % handles      hyl(j) = get(ga(j),'YLabel');  %  "  "      hzl(j) = get(ga(j),'ZLabel');  %  "  "      htl(j) = get(ga(j),'Title');   %  "  "      drag_hList =...         [drag_hList; lineH; textH; patchH];      %[drag_hList; lineH; textH; patchH; hxl(j); hyl(j); hzl(j); htl(j)];      % set 'XLabel', 'YLabel', 'ZLabel' & Title units to agree with units      % obtained from getting mouse position      oldxlabunit(j,:) = pad(get(hxl(j),'Units'), 10);      oldylabunit(j,:) = pad(get(hyl(j),'Units'), 10);      oldzlabunit(j,:) = pad(get(hzl(j),'Units'), 10);      oldtlabunit(j,:) = pad(get(htl(j),'Units'), 10);            %set( hxl(j), 'Units', 'data' );      %set( hyl(j), 'Units', 'data' );      %set( hzl(j), 'Units', 'data' );      %set( htl(j), 'Units', 'data' );      %ylm = get(ga(j), 'YlimMode');      %set(ga(j), 'YlimMode', 'auto');      %ytm = get(ga(j), 'YTickLabelMode');      %set(ga(j), 'YTickLabelMode', 'auto');   end   % set function calls for user actions   for i = 1:length(drag_hList)      set(drag_hList(i),'ButtonDownFcn', 'draggy(''tggl'')');      set(drag_hList(i),'Tag', '');   end   set(drag_hList(1),'ButtonDownFcn', 'draggy(''down'')');   set(drag_hList(1),'Tag', 'dragThis');   set(dragRB(1), 'Value', 1);   set(dragRB(2), 'Value', 0);   dragState = 1;   set(dragWinH,'UserData',drag_hList)   elseif strcmp(action, 'dragoff')   %figure(dragFig)   if (dragMsg)      disp('Object dragging is off.')   end   % if figure was closed, drag_hList values are invalid   try get(drag_hList(1),'Tag')      h_valid = 1;   catch      h_valid = 0;   end   if h_valid      % clear user action functions      for i = 1:length(drag_hList)         set(drag_hList(i),'ButtonDownFcn', '');         set(drag_hList(i),'Tag', '');      end      %for j=1:numAxes      % restore 'XLabel' & 'YLabel' units      %set( hxl(j), 'Units', 'pixels' );      %set( hyl(j), 'Units', 'pixels' );      %set( hzl(j), 'Units', 'pixels' );      %%set( htl(j), 'Units', 'pixels' );   %%%%% seems screwed up!!!      % restore y-axis properties      %set(ga(j), 'YlimMode', ylm);      %set(ga(j), 'YTickLabelMode', ytm);      %end   end %if h_valid   if exist('dragRB','var') && ~isempty(dragRB)      set(dragRB(1), 'Value', 0);      set(dragRB(2), 'Value', 1);   end   dragState = 0;   clear global drag_hList ylm ytm hxl hyl hzl htl dragMsg   elseif strcmp(action, 'dragquit')   curdir=pwd;   dErrFlag = 0;   eval(['cd ' '''' matlabroot ''''])   try cd(findomprefs)      startXYPos = get(dragWinH, 'Position');      if exist('startXYPos','var') && ~isempty(startXYPos)         dragStartXPos = startXYPos(1);         dragStartYPos = startXYPos(2);      end   catch      dErrFlag=1;   end   if ~dErrFlag, eval(['save dragPref.mat dragStartXPos dragStartYPos']), end   eval(['cd ' '''' curdir ''''])   dragger('dragoff')   close(get(gco,'parent'))   clear global drag_hList ylm ytm hxl hyl hzl htl dragMsg dragState   clear global dragFig dragRB dragWinH axHoldH   clear global dataLockXH dataLockYH dataLockZH   clear global dataLockX dataLockY dataLockZ actWinH   clear global dragStartXPos dragStartYPos   elseif strcmp(action, 'update')   if ishandle(dragFig)      dragFigNumStr=num2str(dragFig.Number);   else      dragFigNumStr=num2str(dragFig);   end   set(actWinH,'string',dragFigNumStr);   figure(dragFig)   dragger('dragon')   elseif strcmp(action, 'axHold')   figure(dragFig)   for k=1:length(ga)      set(dragFig,'CurrentAxes', ga(k))      if get(axHoldH,'Value')         set(ga(k),'XLimMode','manual');         set(ga(k),'YLimMode','manual');         set(ga(k),'ZLimMode','manual');      else         set(ga(k),'XLimMode','auto');         set(ga(k),'YLimMode','auto');         set(ga(k),'ZLimMode','auto');      end   end   elseif strcmp(action, 'dataLockX')   %figure(dragFig)   if get(dataLockXH,'Value')      dataLockX = 1;   else      dataLockX = 0;   end   elseif strcmp(action, 'dataLockY')   %figure(dragFig)   if get(dataLockYH,'Value')      dataLockY = 1;   else      dataLockY = 0;   end   elseif strcmp(action, 'dataLockZ')   %figure(dragFig)   if get(dataLockZH,'Value')      dataLockZ = 1;   else      dataLockZ = 0;   end   end %if strcmp(action