% lEditA5.m:  called by linedit to make the changes to line properties.% Written by:  Jonathan Jacobs%              March 1997 - February 2006  (last mod: 02/16/06)function lEditAct(ga, whichStr, action)% get the handles and parameters declared and set in 'PosEdit'% from the 'UserData' field of the 'Position editor' window.% This is a much cleaner method than relying on global variables (6/13/02)leFig = findme('lineEditingWindow');%leFig = get(gco,'Parent');h = get(leFig, 'UserData');% h.edLColrH = h.leHnd{1};      h.edLDelH = h.leHnd{2};      h.edLFColrH = h.leHnd{3};% h.edLMkEdClrH = h.leHnd{4};   h.edLMkFcClrH = h.leHnd{5};  h.edLMSzH = h.leHnd{6};% h.edLSEdgeH = h.leHnd{7};     h.edLSFaceH = h.leHnd{8};    h.edLStylH = h.leHnd{9};% h.edLSymbH = h.leHnd{10};     h.edLWidH = h.leHnd{11};     h.edShowMeH = h.leHnd{12};% h.leColors = h.leHnd{13};     h.leColorStr = h.leHnd{14};  leFig = h.leHnd{15};% h.leH = h.leHnd{16};          h.leMkClrStr = h.leHnd{17};  leStartXPos = h.leHnd{18};% leStartYPos = h.leHnd{19};  h.leStyles = h.leHnd{20};    h.leSymbol = h.leHnd{21};% h.leSymbStr = h.leHnd{22};tag = str2num(whichStr);which = tag(1);col = tag(2);tmpColrStr = blanks(13);% constants for the extra colors% black = 1, blue = 2, green = 3, cyan = 4% red = 5, magenta = 6, yellow= = 7, white = 8LASTBUILTINCOLOR = 8;ORANGE = 9;  DKORANGE = 10;LTGRAY = 11; MEDGRAY = 12;DKGRAY = 13; OFFWHITE = 14;OTHER = 15;  AUTO = 16; NONE = 17;if strcmp(action, 'delete')   delete(h.leH(which,col))   % remove the controls for that row   delete(h.edShowMeH(which,col));   if ~isempty( get(h.edLColrH(which,col)) )      delete(h.edLColrH(which,col));   end   if h.edLFColrH(which,col) ~= 0      delete(h.edLFColrH(which,col));   end   if h.edLSEdgeH(which,col) ~= 0      delete(h.edLSEdgeH(which,col));   end   if h.edLSFaceH(which,col) ~= 0      delete(h.edLSFaceH(which,col));   end   delete(h.edLWidH(which,col));   if ~isempty( get(h.edLStylH(which,col)) )      delete(h.edLStylH(which,col));      delete(h.edLMSzH(which,col));      delete(h.edLSymbH(which,col));      delete(h.edLMkFcClrH(which,col));      delete(h.edLMkEdClrH(which,col));   end   delete(h.edLDelH(which,col));   elseif strcmp(action, 'mrkrSz')   newMkrSz = str2double(get(h.edLMSzH(which,col), 'String'));   if newMkrSz>0 && newMkrSz<=36      set(h.leH(which,col), 'MarkerSize', newMkrSz);   end   elseif strcmp(action, 'showme')   showMe = get(h.leH(which,col), 'Selected');   if strcmp(showMe,'on')      newSVal = 'off';      newStr  = 'Show';   else      newSVal = 'on';      newStr  = 'Don''t';   end   set(h.leH(which,col), 'Selected', newSVal);   set(h.edShowMeH(which,col), 'String', newStr);         % look at Offset/Gain portion of Eyeballs3D (xyplotsettings.m) to get code to   % create a window that lets you set various params.  ideally we'll give user   % the opportunity to decide the name of the variables created and whether   % to use entire data or just what's visible in the current view.elseif strcmp(action, 'datacopy')   ga = get(h.leH(which,col), 'Parent');   xlims=get(ga,'XLim');   xlow = xlims(1); xhigh=xlims(2);      temp = get(h.leH(which,col), 'XData');   diff = abs(temp-xlow);   startpt = find( diff==min(diff) );   if isempty(startpt), startpt = 1; else, startpt=startpt(1);end      diff = abs(temp-xhigh);   stoppt = find( diff==min(diff) );   if isempty(stoppt), stoppt = length(temp); else, stoppt=stoppt(1);end      xdatafull = get(h.leH(which,col), 'XData');   ydatafull = get(h.leH(which,col), 'YData');   xdata = xdatafull(startpt:stoppt);   ydata = ydatafull(startpt:stoppt);      disp('Displayed X data saved as "xdata"; full X data saved as "xdatafull"')   disp('Displayed Y data saved as "xdata"; full Y data saved as "ydatafull"')   assignin('base','xdata',xdata)   assignin('base','ydata',ydata)   assignin('base','xdatafull',xdatafull)   assignin('base','ydatafull',ydatafull)   elseif strcmp(action, 'datamod')   % allow user to replace existing data or to modify it.   elseif strcmp(action, 'width')   newwid = str2double(get(h.edLWidH(which,col), 'String'));   if newwid>=0 && newwid<=10      set(h.leH(which,col), 'LineWidth', newwid);   end   elseif strcmp(action, 'surf')   value = get(h.edLSFaceH(which,col), 'value');   set(h.edLSFaceH(which,col), 'BackgroundColor', 'w')   set(h.edLSFaceH(which,col), 'ForegroundColor', 'k')   if value == 1      set(h.leH(which,col), 'FaceColor', 'none')   elseif value == 2      set(h.leH(which,col), 'FaceColor', 'flat')   elseif value == 3      set(h.leH(which,col), 'FaceColor', 'interp')   elseif value == 4      set(h.leH(which,col), 'FaceColor', 'texturemap')   elseif value == 5      newSurf = uisetcolor;      %%%%      if length(newSurf) == 3         set(h.leH(which,col), 'FaceColor', newSurf)         set(h.edLSFaceH(which,col), 'BackgroundColor', newSurf)         if sum(newSurf)<0.3 || strcmpi(newSurf,'k')            %set(h.edLSFaceH(which,col), 'ForegroundColor', [1 1 1])         end      end      %%%%   end   elseif strcmp(action, 'edge')   value = get(h.edLSEdgeH(which,col), 'value');   set(h.edLSEdgeH(which,col), 'BackgroundColor', 'w')   set(h.edLSEdgeH(which,col), 'ForegroundColor', 'k')   if value == 1      set(h.leH(which,col), 'EdgeColor', 'none')   elseif value == 2      set(h.leH(which,col), 'EdgeColor', 'flat')   elseif value == 3      set(h.leH(which,col), 'EdgeColor', 'interp')   elseif value == 4      newEdge = uisetcolor;      %%%%      if length(newEdge) == 3         set(h.leH(which,col), 'EdgeColor', newEdge)         set(h.edLSEdgeH(which,col), 'BackgroundColor', newEdge)         if sum(newEdge)<0.3 || strcmpi(newEdge,'k')            %set(h.edLSEdgeH(which,col), 'ForegroundColor', [1 1 1])         end      end      %%%%   end   elseif strcmp(action, 'colr')   isLine = strcmp(get(h.leH(which,col),'Type'), 'line');   %set(h.edLColrH(which,col), 'BackgroundColor', 'c')   set(h.edLColrH(which,col), 'ForegroundColor', 'k')   colorval = get(h.edLColrH(which,col), 'value');   colors = whatcolor(colorval);      if colorval == OTHER      newcolor = uisetcolor;      if newcolor == 0         return      end      %%%%      % truncate the RGB components to fit w/in 13 chars.      for k=1:3         tempstr = [num2str(newcolor(k)) ' 0 '];         if tempstr(1) == '1'            tmpColrStr( (k-1)*4+1:k*4 ) = ' 1  ';         else            tmpColrStr( (k-1)*4+1:k*4 ) = [tempstr(2:4) ' '];         end      end      %%%%      % update the popup string      newColorStr = h.leColorStr;      newColorStr(OTHER,1:13)=tmpColrStr(1:13);      set(h.edLColrH(which,col),'String',newColorStr);      %set(h.edLColrH(which,col),'value',OTHER); %% <- bec. of ML4 bug      linedit   elseif colorval == ORANGE      %restore old colors string      set(h.edLColrH(which,col),'String',h.leColorStr);      set(h.edLColrH(which,col),'value',ORANGE); %% <- bec. of ML4 bug      newcolor = [1 0.5 0];   elseif colorval == DKORANGE      %restore old colors string      set(h.edLColrH(which,col),'String',h.leColorStr);      set(h.edLColrH(which,col),'value',DKORANGE); %% <- bec. of ML4 bug      newcolor = [1.0 0.25 0.0];   elseif colorval == LTGRAY      %restore old colors string      set(h.edLColrH(which,col),'String',h.leColorStr);      set(h.edLColrH(which,col),'value',LTGRAY); %% <- bec. of ML4 bug      newcolor = [0.75 0.75 0.75];   elseif colorval == MEDGRAY      %restore old colors string      set(h.edLColrH(which,col),'String',h.leColorStr);      set(h.edLColrH(which,col),'value',MEDGRAY); %% <- bec. of ML4 bug      newcolor = [0.5 0.5 0.5];   elseif colorval == DKGRAY      %restore old colors string      set(h.edLColrH(which,col),'String',h.leColorStr);      set(h.edLColrH(which,col),'value',DKGRAY); %% <- bec. of ML4 bug      newcolor = [0.15 0.15 0.15];   elseif colorval == OFFWHITE      %restore old colors string      set(h.edLColrH(which,col),'String',h.leColorStr);      set(h.edLColrH(which,col),'value',DKGRAY); %% <- bec. of ML4 bug      newcolor = [0.94 0.94 0.94];   else % colorval <= LASTBUILTINCOLOR      %restore old colors string      set(h.edLColrH(which,col),'String',h.leColorStr);      set(h.edLColrH(which,col),'value',colorval); %% <- bec. of ML4 bug      newcolor = h.leColors(colorval);   end   if (colorval>LASTBUILTINCOLOR) || contains(h.leColors, newcolor)      if (isLine)         set(h.leH(which,col), 'Color', newcolor);      else         set(h.leH(which,col), 'EdgeColor', newcolor);      end   end   newcolor=colors.str;   set(h.edLColrH(which,col), 'BackgroundColor', newcolor)   %%%% optional comment out   if sum(newcolor)<0.3 || strcmpi(newcolor,'k')      set(h.edLColrH(which,col), 'ForegroundColor', [0 0 0])   %%%%%%%      set(h.edLColrH(which,col), 'BackgroundColor', [1 1 1])   %%%%%%%   end   elseif strcmp(action, 'fcolr')   set(h.edLFColrH(which,col), 'BackgroundColor', 'w')   set(h.edLFColrH(which,col), 'ForegroundColor', 'k')   colorval = get(h.edLFColrH(which,col), 'value');   if colorval == OTHER      newcolor = uisetcolor;      if length(newcolor) ~= 3         return      end      % truncate the RGB components to fit w/in 13 chars.      for k=1:3         tempstr = [num2str(newcolor(k)) ' 0 '];         if strcmp(tempstr(1),'1')            tmpColrStr( (k-1)*4+1:k*4 ) = ' 1  ';         else            tmpColrStr( (k-1)*4+1:k*4 ) = [tempstr(2:4) ' '];         end      end      % update the popup string      newColorStr = h.leColorStr;      newColorStr(OTHER,1:13)=tmpColrStr(1:13);      set(h.edLFColrH(which,col),'String',newColorStr);      set(h.edLFColrH(which,col),'value',OTHER); %% <- bec. of ML4 bug      linedit   elseif colorval == ORANGE      %restore old colors string      set(h.edLFColrH(which,col),'String',h.leColorStr);      set(h.edLFColrH(which,col),'value',ORANGE); %% <- bec. of ML4 bug      newcolor = [1 0.5 0];   elseif colorval == DKORANGE      %restore old colors string      set(h.edLFColrH(which,col),'String',h.leColorStr);      set(h.edLFColrH(which,col),'value',DKORANGE); %% <- bec. of ML4 bug      newcolor = [1.0 0.25 0.0];   elseif colorval == LTGRAY      %restore old colors string      set(h.edLFColrH(which,col),'String',h.leColorStr);      set(h.edLFColrH(which,col),'value',LTGRAY); %% <- bec. of ML4 bug      newcolor = [0.75 0.75 0.75];   elseif colorval == MEDGRAY      %restore old colors string      set(h.edLFColrH(which,col),'String',h.leColorStr);      set(h.edLFColrH(which,col),'value',LTGRAY); %% <- bec. of ML4 bug      newcolor = [0.5 0.5 0.5];   elseif colorval == DKGRAY      %restore old colors string      set(h.edLFColrH(which,col),'String',h.leColorStr);      set(h.edLFColrH(which,col),'value',DKGRAY); %% <- bec. of ML4 bug      newcolor = [0.15 0.15 0.15];   elseif colorval == OFFWHITE      %restore old colors string      set(h.edLFColrH(which,col),'String',h.leColorStr);      set(h.edLFColrH(which,col),'value',DKGRAY); %% <- bec. of ML4 bug      newcolor = [0.94 0.94 0.94];   else % colorval<= LASTBUILTINCOLOR      %restore old colors string      set(h.edLFColrH(which,col),'String',h.leColorStr);      set(h.edLFColrH(which,col),'value',colorval); %% <- bec. of ML4 bug      newcolor = h.leColors(colorval);   end   if (colorval>LASTBUILTINCOLOR) || contains(h.leColors,newcolor)      set(h.leH(which,col), 'FaceColor', newcolor);   end   set(h.edLFColrH(which,col), 'BackgroundColor', newcolor )   %%%% optional comment out   if sum(newcolor)<0.3 || strcmpi(newcolor,'k')      set(h.edLColrH(which,col), 'ForegroundColor', [0 0 0])   %%%%%%%      set(h.edLColrH(which,col), 'BackgroundColor', [1 1 1])   %%%%%%%   end   elseif strcmp(action, 'style')   temp = get(h.edLStylH(which,col), 'value');   newstyle = ( (2*temp)-1:(2*temp) );   set(h.leH(which,col), 'LineStyle', h.leStyles(newstyle));   elseif strcmp(action, 'symb')   newsymb = get(h.edLSymbH(which,col), 'value');   set(h.leH(which,col), 'Marker', h.leSymbol(newsymb));   elseif strcmp(action, 'mkfclr')   colorval = get(h.edLMkFcClrH(which,col), 'value');   set(h.edLMkFcClrH(which,col), 'BackgroundColor', 'w')   set(h.edLMkFcClrH(which,col), 'ForegroundColor', 'k')   if colorval == OTHER      newcolor = uisetcolor;      if newcolor == 0         return      end      % truncate the RGB components to fit w/in 13 chars.      for k=1:3         tempstr = [num2str(newcolor(k)) ' 0 '];         if strcmp(tempstr(1),'1')            tmpColrStr( (k-1)*4+1:k*4 ) = ' 1  ';         else            tmpColrStr( (k-1)*4+1:k*4 ) = [tempstr(2:4) ' '];         end      end      % update the popup string      newColorStr = h.leMkClrStr;      newColorStr(OTHER,1:13)=tmpColrStr(1:13);      set(h.edLMkFcClrH(which,col),'String',newColorStr);      set(h.edLMkFcClrH(which,col),'value',OTHER); %% <- bec. of ML4 bug      linedit   elseif colorval == ORANGE      %restore old colors string      set(h.edLMkFcClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkFcClrH(which,col),'value',ORANGE); %% <- bec. of ML4 bug      newcolor = [1 0.5 0];   elseif colorval == DKORANGE      %restore old colors string      set(h.edLMkFcClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkFcClrH(which,col),'value',DKORANGE); %% <- bec. of ML4 bug      newcolor = [1.0 0.25 0.0];   elseif colorval == LTGRAY      %restore old colors string      set(h.edLMkFcClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkFcClrH(which,col),'value',LTGRAY); %% <- bec. of ML4 bug      newcolor = [0.75 0.75 0.75];   elseif colorval == MEDGRAY      %restore old colors string      set(h.edLMkFcClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkFcClrH(which,col),'value',MEDGRAY); %% <- bec. of ML4 bug      newcolor = [0.5 0.5 0.5];   elseif colorval == DKGRAY      %restore old colors string      set(h.edLMkFcClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkFcClrH(which,col),'value',DKGRAY); %% <- bec. of ML4 bug      newcolor = [0.15 0.15 0.15];   elseif colorval == OFFWHITE      %restore old colors string      set(h.edLMkFcClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkFcClrH(which,col),'value',DKGRAY); %% <- bec. of ML4 bug      newcolor = [0.94 0.94 0.94];   else % colorval <= LASTBUILTINCOLOR      %restore old colors string      set(h.edLMkFcClrH(which,col),'String',h.leMkClrStr);      newcolor = h.leColors(colorval);   end      set(h.leH(which,col), 'MarkerFaceColor', newcolor);   if strcmp(newcolor,'n') || strcmp(newcolor,'a')      set(h.edLMkFcClrH(which,col), 'BackgroundColor', 'w')   else      set(h.edLMkFcClrH(which,col), 'BackgroundColor', newcolor) %%%% optional comment out   end   if sum(newcolor)<0.3 || strcmpi(newcolor,'k')      set(h.edLMkFcClrH(which,col), 'ForegroundColor', [0 0 0])   %%%%%%%      set(h.edLMkFcClrH(which,col), 'BackgroundColor', [1 1 1])   %%%%%%%   end   elseif strcmp(action, 'mkeclr')   colorval = get(h.edLMkEdClrH(which,col), 'value');   set(h.edLMkEdClrH(which,col), 'BackgroundColor', 'w')   set(h.edLMkEdClrH(which,col), 'ForegroundColor', 'k')   if colorval == OTHER      newcolor = uisetcolor;      if newcolor == 0         return      end      % truncate the RGB components to fit w/in 13 chars.      for k=1:3         tempstr = [num2str(newcolor(k)) ' 0 '];         if tempstr(1) == '1'            tmpColrStr( (k-1)*4+1:k*4 ) = ' 1  ';         else            tmpColrStr( (k-1)*4+1:k*4 ) = [tempstr(2:4) ' '];         end      end      % update the popup string      newColorStr = h.leMkClrStr;      newColorStr(OTHER,1:13)=tmpColrStr(1:13);      set(h.edLMkEdClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkEdClrH(which,col),'value',OTHER); %% <- bec. of ML4 bug      linedit   elseif colorval == ORANGE      %restore old colors string      set(h.edLMkEdClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkEdClrH(which,col),'value',ORANGE); %% <- bec. of ML4 bug      newcolor = [1 0.5 0];   elseif colorval == DKORANGE      %restore old colors string      set(h.edLMkEdClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkEdClrH(which,col),'value',DKORANGE); %% <- bec. of ML4 bug      newcolor = [1.0 0.25 0.0];   elseif colorval == LTGRAY      %restore old colors string      set(h.edLMkEdClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkEdClrH(which,col),'value',LTGRAY); %% <- bec. of ML4 bug      newcolor = [0.75 0.75 0.75];   elseif colorval == MEDGRAY      %restore old colors string      set(h.edLMkEdClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkEdClrH(which,col),'value',MEDGRAY); %% <- bec. of ML4 bug      newcolor = [0.5 0.5 0.5];   elseif colorval == DKGRAY      %restore old colors string      set(h.edLMkEdClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkEdClrH(which,col),'value',DKGRAY); %% <- bec. of ML4 bug      newcolor = [0.15 0.15 0.15];   elseif colorval == OFFWHITE      %restore old colors string      set(h.edLMkFcClrH(which,col),'String',h.leMkClrStr);      set(h.edLMkFcClrH(which,col),'value',DKGRAY); %% <- bec. of ML4 bug      newcolor = [0.94 0.94 0.94];   else % colorval <= LASTBUILTINCOLOR      %restore old colors string      set(h.edLMkEdClrH(which,col),'String',h.leMkClrStr);      newcolor = h.leColors(colorval);   end   set(h.leH(which,col), 'MarkerEdgeColor', newcolor);   if strcmp(newcolor,'n') || strcmp(newcolor,'a')      set(h.edLMkEdClrH(which,col), 'BackgroundColor', 'w')   else      set(h.edLMkEdClrH(which,col), 'BackgroundColor', newcolor)  %%%% optional comment out   end   if sum(newcolor)<0.3 || strcmpi(newcolor,'k')      set(h.edLMkEdClrH(which,col), 'ForegroundColor', [0 0 0])   %%%%%%%      set(h.edLMkEdClrH(which,col), 'BackgroundColor', [1 1 1])   %%%%%%%   end   elseif strcmp(action, 'done') || strcmp(action, 'update')   curdir=pwd;   dErrFlag = 0;   cd(matlabroot)   try    cd(findomprefs)   catch, dErrFlag=1;end   startXYPos = get(leFig, 'Position');   leStartXPos = startXYPos(1);   leStartYPos = startXYPos(2);   if ~dErrFlag      save le5Prefs.mat leStartXPos leStartYPos   end   cd(curdir)   close(leFig)   if strcmp(action, 'update')      linedit   endend