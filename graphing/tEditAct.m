% tEditAct.m:  called by tEdit to make the changes to text properties.% Written by:  Jonathan Jacobs%              March 1997 - June 2002 (last mod: 06/13/02)function tEditAct(ga, whichStr, action)% get the handles and parameters declared and set in 'TextEdit'% from the 'UserData' field of the 'Text editor' window.  % This is a much cleaner method than relying on global variables (6/13/02)teFig = get(gco,'Parent');teH = get(teFig,'UserData');edTaxColrH = teH{1};    edTaxFontH = teH{2};    edTaxFSzH = teH{3};edTColrH  = teH{4};     edTDelH = teH{5};       edTFontH = teH{6};edTFSzH = teH{7};       edTRotH = teH{8};       edTxtH = teH{9};teColors = teH{10};     teColorStr = teH{11};   teFig = teH{12};teStartXPos = teH{13};  teStartYPos = teH{14};  textH = teH{15};% constants for the extra colorsLASTBUILTINCOLOR = 8;ORANGE = 9;  DKORANGE = 10;LTGRAY = 11; DKGRAY = 12; OFFWHITE = 13;OTHER = 14;tag = str2num(whichStr);which = tag(1);col = tag(2);tmpColrStr = blanks(13);gf=get(ga,'Parent');chList = findobj(gf);count=1;axList = zeros(1,length(chList));for i=1:length(chList)   if strcmp(get(chList(i),'type'),'axes')      axList(count)=chList(i);      count=count+1;   endendnumAxes=length(axList);if strcmp(action, 'delete')   delete(textH(which,col))   % remove the controls for that row   delete(edTxtH(which,col));   delete(edTFSzH(which,col));   delete(edTRotH(which,col));   delete(edTColrH(which,col));   delete(edTDelH(which,col));   delete(edTFontH(which,col)); elseif strcmp(action, 'fontS')   newfsize = str2double(get(edTFSzH(which,col),'String'));   if (newfsize>=6) && (newfsize<=24)      set(textH(which,col), 'FontSize', newfsize);   end elseif strcmp(action, 'str')   newstr = get(edTxtH(which,col), 'String');   set(textH(which,col), 'String', newstr); elseif strcmp(action, 'font')   uisetfont(textH(which,col), 'Font Properties');   newfsize = get(textH(which,col),'FontSize');   set(edTFSzH(which,col), 'String', num2str(newfsize)); elseif strcmp(action, 'axFont')   a=uisetfont(ga, 'Font Properties');   if ~isstruct(a), return; end        %% if cancelled   newFontName = get(ga,'FontName');   newFontSize = get(ga,'FontSize');   newFontAngle = get(ga,'FontAngle');	newFontStrikeThrough = get(ga,'FontStrikeThrough');	newFontUnderline = get(ga,'FontUnderline');	newFontWeight = get(ga,'FontWeight');   for i = 1:numAxes      set(axList(i),'FontName',newFontName);      set(axList(i),'FontSize',newFontSize);      set(axList(i),'FontAngle',newFontAngle);      set(axList(i),'FontStrikeThrough',newFontStrikeThrough);      set(axList(i),'FontUnderline',newFontUnderline);      set(axList(i),'FontWeight',newFontWeight);   end   set(edTaxFSzH, 'String', num2str(newFontSize)); elseif strcmp(action, 'axFontS')   newfsize = str2double(get(edTaxFSzH, 'String'));   if (newfsize>=6) && (newfsize<=24)      for i = 1:numAxes         set(axList(i),'FontSize',newfsize);      end   end elseif strcmp(action, 'rot')   newrot = str2double(get(edTRotH(which,col), 'String'));   if (newrot>=0) && (newrot<=360)      set(textH(which,col), 'Rotation', newrot);   end elseif strcmp(action, 'colr')   colorval = get(edTColrH(which,col), 'value');   set(edTColrH(which,col), 'BackgroundColor', 'c')   set(edTColrH(which,col), 'ForegroundColor', 'k')   if colorval == OTHER      newcolor = uisetcolor;      if newcolor == 0         return      end      % truncate the RGB components to fit w/in 13 chars.      for k=1:3         tempstr = [num2str(newcolor(k)) ' 0 '];         if tempstr(1) == '1'            tmpColrStr( (k-1)*4+1:k*4 ) = ' 1  ';          else            tmpColrStr( (k-1)*4+1:k*4 ) = [tempstr(2:4) ' '];         end      end      % update the popup string      newColorStr = teColorStr;      newColorStr(OTHER,1:13)=tmpColrStr(1:13);      set(edTColrH(which,col),'String',newColorStr);      set(edTColrH(which,col),'value',OTHER); %% <- bec. of ML4 bug      textedit    elseif colorval == ORANGE      %restore old colors string      set(edTColrH(which,col),'String',teColorStr);      set(edTColrH(which,col),'value',ORANGE); %% <- bec. of ML4 bug      newcolor = [1 0.5 0];    elseif colorval == DKORANGE      %restore old colors string      set(edTColrH(which,col),'String',teColorStr);      set(edTColrH(which,col),'value',DKORANGE); %% <- bec. of ML4 bug      newcolor = [1.0 0.25 0.0];    elseif colorval == LTGRAY      %restore old colors string      set(edTColrH(which,col),'String',teColorStr);      set(edTColrH(which,col),'value',LTGRAY); %% <- bec. of ML4 bug      newcolor = [0.75 0.75 0.75];    elseif colorval == DKGRAY      %restore old colors string      set(edTColrH(which,col),'String',teColorStr);      set(edTColrH(which,col),'value',DKGRAY); %% <- bec. of ML4 bug      newcolor = [0.2 0.2 0.2];    elseif colorval == OFFWHITE      %restore old colors string      set(edTColrH(which,col),'String',teColorStr);      set(edTColrH(which,col),'value',OFFWHITE); %% <- bec. of ML4 bug      newcolor = [0.94 0.94 0.94];    else % colorval <= 8      %restore old colors string      set(edTColrH(which,col),'String',teColorStr);      set(edTColrH(which,col),'value',colorval); %% <- bec. of ML4 bug      newcolor = teColors(colorval);   end   if (colorval>LASTBUILTINCOLOR) || contains(teColors,newcolor)      set(textH(which,col), 'Color', newcolor);   end   set(edTColrH(which,col), 'BackgroundColor', newcolor)   if sum(newcolor)<0.3 || strcmp(newcolor,'k')      set(edTColrH(which,col), 'BackgroundColor', 'w')   %%%%      set(edTColrH(which,col), 'ForegroundColor', 'k')   %%%%   end elseif strcmp(action, 'axColr')   colorval = get(edTaxColrH, 'value');   set(edTaxColrH, 'BackgroundColor', 'c')   set(edTaxColrH, 'ForegroundColor', 'k')   if colorval == OTHER      newcolor = uisetcolor;      if newcolor == 0         return      end      % truncate the RGB components to fit w/in 13 chars.      for k=1:3         tempstr = [num2str(newcolor(k)) ' 0 '];         if tempstr(1) == '1'            tmpColrStr( (k-1)*4+1:k*4 ) = ' 1  ';          else            tmpColrStr( (k-1)*4+1:k*4 ) = [tempstr(2:4) ' '];         end      end      % update the popup string      newColorStr = teColorStr;      newColorStr(OTHER,1:13)=tmpColrStr(1:13);      set(edTaxColrH,'String',newColorStr);      set(edTaxColrH,'value',OTHER); %% <- bec. of ML4 bug      textedit    elseif colorval == ORANGE      %restore old colors string      set(edTaxColrH,'String',teColorStr);      set(edTaxColrH,'value',ORANGE); %% <- bec. of ML4 bug      newcolor = [1 0.5 0];    elseif colorval == DKORANGE      %restore old colors string      set(edTaxColrH,'String',teColorStr);      set(edTaxColrH,'value',DKORANGE); %% <- bec. of ML4 bug      newcolor = [1.0 0.25 0.0];    elseif colorval == LTGRAY      %restore old colors string      set(edTaxColrH,'String',teColorStr);      set(edTaxColrH,'value',LTGRAY); %% <- bec. of ML4 bug      newcolor = [0.75 0.75 0.75];    elseif colorval == DKGRAY      %restore old colors string      set(edTaxColrH,'String',teColorStr);      set(edTaxColrH,'value',DKGRAY); %% <- bec. of ML4 bug      newcolor = [0.2 0.2 0.2];    elseif colorval == OFFWHITE      %restore old colors string      set(edTaxColrH,'String',teColorStr);      set(edTaxColrH,'value',OFFWHITE); %% <- bec. of ML4 bug      newcolor = [0.94 0.94 0.94];    else % colorval <= LASTBUILTINCOLOR          %%~= 9      %restore old colors string      set(edTaxColrH,'String',teColorStr);      set(edTaxColrH,'value',colorval); %% <- bec. of ML4 bug      newcolor = teColors(colorval);   end   if (colorval>LASTBUILTINCOLOR) || contains(teColors,newcolor)      for i=1:numAxes         set(axList(i), 'XColor', newcolor);         set(axList(i), 'YColor', newcolor);         set(axList(i), 'ZColor', newcolor);      end   end   set(edTaxColrH, 'BackgroundColor', newcolor)   if sum(newcolor)<0.3 || strcmp(newcolor,'k')      set(edTaxColrH, 'BackgroundColor', 'w')  %%%%      set(edTaxColrH, 'ForegroundColor', 'k')  %%%%   end elseif strcmp(action,'update') || strcmp(action,'done')   curdir=pwd;   dErrFlag = 0;   cd(matlabroot)   try    cd(findomprefs)   catch, dErrFlag=1; end   startXYPos = get(teFig, 'Position');   teStartXPos = startXYPos(1);   teStartYPos = startXYPos(2);   if ~dErrFlag      save tePrefs.mat teStartXPos teStartYPos   end   cd(curdir)   close(teFig)   if strcmp(action, 'update')      textedit   endend