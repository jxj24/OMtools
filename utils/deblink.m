% deblink.m: remove blinks from data, using either an interactive GUI or % direct programmatic call to 'findblinks'.%% usage: out = deblink(pos, thresh_p, thresh_v, thresh_a, %   						  pos_stop, vel_stop, acc_stop, extend)%%    thresh_p   -- the threshold (pos) above which a blink is considered "ON"%    thresh_v   -- the threshold (vel) above which a blink is considered "ON"%    thresh_a   -- the threshold (acc) above which a blink is considered "ON"%    pos_stop   -- the threshold (pos) below which a blink is considered "OFF"%    vel_stop   -- the threshold (vel) below which a blink is considered "OFF"%    acc_stop   -- the threshold (acc) below which a blink is considered "OFF"%    extend     -- extend blanking x samples before/after computed blink% % 'findblinks' saves these variables into the base workspace:%    ptlist     -- the vector of 'yes'/'no' points (good data = 1, blink = 0 or NaN)%    pvlist     -- the samp # where each PV occurred in the fast phases%    blinkstart  -- start point of each blink%    blinkstop   -- end point of each blink%    pvel       -- the values of the peak velocities of the fast phases%    extend     -- the value of the 'extend' setting%    dataName   -- the string containing the name of the data being analyzed%    thresh_v   -- the threshold (vel) above which blinks is considered "ON"%    thresh_a   -- the threshold (acc) above which blinks is considered "ON"%    vel_stop   -- the threshold (vel) below which blinks is considered "OFF"%    acc_stop   -- the threshold (acc) below which blinks is considered "OFF"% % Requires: 'findblinks.m', 'd2pt.m', 'maket.m', 'stripnan.m' and 'zoomtool'% The sampling frequency must be stored in a global variable named 'samp_freq'% written by:  Jonathan Jacobs%              November 2006 - December 2006 (last mod: 12/05/06)function [out, blinks] = deblink(pos, varargin)if nargin == 0   deblink_gui   returnend   % these are the default values.  use them when deblink is called with only one input% (the data to be deblinked). p(1) = 40;    p(2) = 40;   % thresh_p  pos_stopp(3) = 200;   p(4) = 50;   % thresh_v  vel_stopp(5) = 15000; p(6) = 5000; % thresh_a  acc_stopp(7) = 20;                 % extend% if nargin>1 then use varargin to assign the provided inputs to the parametersif nargin > 1	num_inp_params = length(varargin);   for i=1:num_inp_params      p(i) = varargin{i};   endend% the actual deblinking work is done in findblinksblinks = findblinks( pos, p(1), p(2), p(3), p(4), p(5), p(6), p(7) );ptlist=blinks.ptlist;if isempty(ptlist)   out=pos;   return; end% use the results of findblinks to remove the blinks from the position data% ptlist comes out of 'findblinks' with bad pts as '0', but we might want 'NaNs'tempnan = NaN*ones(length(ptlist),1);nan_pts = find(ptlist == 0);ptlist(nan_pts) = tempnan(nan_pts);out = pos .* ptlist;