% rsrgen.m: ramp-step-ramp stim generator.  called by rsrbuild.% Written by:  Jonathan Jacobs%              May 1999 - June 1999 (last mod: 06/21/99)function out = rsrgen(sampAO,initpos,vel,saccamp,pdur,displayflag);maxampl = 30;minampl = -30;initialpath = pwd;if nargin < 6	sampAO = [];	sampAO = input('What is the sampling frequency? <default=100> ');	if isempty(sampAO)	   sampAO = 100;	end	vel = input('What is the velocity in deg/sec (L-->R = positive)? ');	initpos = input('What is the initial position? ');	saccamp = input('What size saccade (oppose = negative)? ');	pdur = input('Pause after back-jump (sec): ');   displayflag = 1;endif vel > 0                   %% R-->L   startpt = minampl;   stoppt  = maxampl;   saccamp = -saccamp; else                        %% L-->R   startpt = maxampl;   stoppt  = minampl;endstepsize = vel/sampAO;dur0 = 0.5;seg0 = initpos*ones(sampAO*dur0,1);  %% half-second initial fixation% here is a truly skanky trick: we must generate segment 1 IN REVERSE % to insure that its endpoint (i.e. just before the saccade) is exactly% what we want it to be, because the sampling frequency is so low that% the stepsize doesn't guarantee that we would land on that point otherwise.% Once we have the reversed segment, we can flip it appropriately.revseg1 = ((saccamp/2):-stepsize:startpt)';seg1=flipud(revseg1);t1=maket(seg1,sampAO);% we do not need to do the above-mentioned skank hack here, since% this segment STARTS with the critical point.  What luck!seg2 = (-saccamp/2:stepsize:stoppt)';% EXPERIMENTAL!!!  Howzabout a little pause immediately after the% jump to give the subject a chance to actually see it well?% any value for the sixth input argument will generate a pausepauseseg = -(saccamp/2)*ones(pdur*sampAO,1);amplvect = [seg1; seg2];amplvect = [seg1; pauseseg; seg2];% this _seemed_ like a good idea at the time.  oh well.% round down to nearest quarter second%roundedlen = fix(length(amplvect)/25)*25;%amplvect = amplvect(1:roundedlen);t = maket(amplvect,100);if displayflag   plot(t,amplvect)   disp(['Duration = ' num2str(length(t)/sampAO) ' seconds.'])end% if called with an output argument we will not ask to write to fileif nargout == 0	yorn=lower(input('Write this to file (y/n)? ','s'));		file = 0;	if yorn=='y'	   [file, path] = uiputfile('*.stm', 'Save As');	end		if file == 0	   %disp('No file written.')	   eval(['cd ' '''' initialpath ''''])	   %return	 else	   eval(['cd ' '''' path ''''])	   eval(['save ' file ' amplvect  -ascii'])	   disp([file ' written to ' path ])   end   return else   out = amplvect;end