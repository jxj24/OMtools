% saccgen1.m: A primitive CLI program to generate the saccade stimuli for% the BME undergrad lab.  This stim file is meant to be read by the LabVIEW% data acquisition/analog output VI.% The sampling frequency is 100 Hz, a value that was set by acq_disp_AO.vi% therefore times can be specified only within 0.01 seconds.% Usage: out = saccgen1;  (use of an output variable is optional)% Written by:  Jonathan Jacobs%              March 1999 (last mod: 03/12/99)% Modified by: King Yi%              4/25/2011 - Minor bug fixes in saving datafunction out = saccgen1()samptemp = 100;initialpath = pwd;tgt = [-5  5];durlist = [0 2 5 10 15 20 25 30 35 40 45 50];t_or_s = 't';tstr = 'seconds';sampf = samptemp;promptstr = 'How many fixations at each duration: ';numperdur=-1;while (numperdur<= 0)   numperdur = input(promptstr);end% '2' because we sometimes start w/a jump to the left% and other times with a jump to the rightnumfixes  = 2 * numperdur * length(durlist);% remain keeps track of how many fixations% of each type (initial direction and duration)% we still need to makeremain = numperdur*ones(length(durlist),2);% generate a random number between 20 & 500 ms% generate next position (-5, 0 or +5 deg)runningdur = 0;amplvect = [];count = 1;while (count<=numfixes) & any(any(remain))   % randomly pick a possible duration/direction   ind = 1+fix( length(durlist)*rand );   dur = durlist(ind);   nextdir = 1+fix(length(tgt)*rand);   % see if we still can make this combo    if remain(ind,nextdir)   	       % build the cycle      % 1 sec at zero, T sec at +/-5, 1-T sec at -/+5, 1 sec at 0      initseg  = zeros(100,1);      saccseg1 = tgt(nextdir)*ones(dur,1);      saccseg2 = -tgt(nextdir)*ones(100-dur,1);      restseg  = zeros(100,1);	   amplvect = [amplvect; [initseg;saccseg1;saccseg2;restseg]];       % reduce this combo's elegibility      % and record this as a good trial stim      remain(ind,nextdir) = remain(ind,nextdir) - 1;      count = count + 1;      %disp(['generated: (' num2str(ind) ', ' num2str(nextdir) ')'])    else      %disp(['used up: (' num2str(ind) ', ' num2str(nextdir) ')'])   endend %while%remaindisp(['This trial will take ' num2str(3*numfixes) ' seconds'])figuret=maket(amplvect,sampf);plot(t,amplvect)xlabel(['Time (' tstr ')'])ylabel('Stimulus Amplitude (deg)')title('STIMGEN output')disp(' ')%disp('If you are happy with this result, you can save it as an ASCII file')%disp('Otherwise, run "STIMGEN" again.')yorn=lower(input('Write this to file (y/n)? ','s'));file = 0;if yorn=='y'   [file, path] = uiputfile('*.stm', 'Save As');endif file == 0   %disp('No file written.')   %eval(['cd ' '''' initialpath '''']) else	eval(['cd ' '''' path ''''])	eval(['save ' file ' amplvect  -ascii'])   disp(['"' file '" written to ' path '"'])   % if 'filetype.m' and 'filetype.mex' are present we will use 'em   if strcmp(comp,'MAC2') & exist('filetype.m') == 2 & exist('filetype.mex') == 3      [oldtype,oldcreator]=filetype('adjbias.txt','TEXT','R*ch');   end	%eval(['cd ' '''' initialpath ''''])endif nargout == 0   return else   out = amplvect;end